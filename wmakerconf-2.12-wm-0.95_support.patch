diff -aur wmakerconf-2.12.pristine/src/menu.c wmakerconf-2.12.new/src/menu.c
--- wmakerconf-2.12.pristine/src/menu.c	2013-03-04 14:43:58.163454089 +0100
+++ wmakerconf-2.12.new/src/menu.c	2013-03-04 14:46:18.762294767 +0100
@@ -1,8 +1,8 @@
 /*
- *  menu.c:			
+ *  menu.c:
  *
  *  Written by:		Ullrich Hafner
- *		
+ *
  *  Copyright (C) 1998 Ullrich Hafner <hafner@bigfoot.de>
  *
  *  This program is free software; you can redistribute it and/or modify
@@ -50,7 +50,7 @@
 /*****************************************************************************
 
 			    global variables
-  
+
 *****************************************************************************/
 
 extern char       *orig_wmaker_fname;
@@ -66,7 +66,7 @@
 /*****************************************************************************
 
 			    static variables
-  
+
 *****************************************************************************/
 
 static GtkWidget *revert_menu = NULL;
@@ -76,7 +76,7 @@
 /*****************************************************************************
 
 				prototypes
-  
+
 *****************************************************************************/
 
 static void
@@ -104,7 +104,7 @@
 /*******************************************************************************
 
 				public code
-  
+
 *******************************************************************************/
 
 GtkWidget *
@@ -120,7 +120,7 @@
    GtkWidget *help_menu   = gtk_menu_new ();
    GtkWidget *themes_menu = gtk_menu_new ();
    GtkWidget *item, *menu_bar;
-   
+
    save_menu = item = gtk_menu_item_new_with_label (_("Save"));
    gtk_menu_append (GTK_MENU (file_menu), item);
    gtk_signal_connect_object (GTK_OBJECT (item), "activate",
@@ -152,7 +152,7 @@
        gtk_signal_connect_object (GTK_OBJECT (item), "activate",
 				  GTK_SIGNAL_FUNC (upgrade), NULL);
     }
-    
+
    item = gtk_menu_item_new();
    gtk_menu_append (GTK_MENU (file_menu), item);
 #endif /* HAVE_POPEN  && WWWUPDATE */
@@ -184,7 +184,7 @@
 			      GTK_SIGNAL_FUNC (gtk_widget_show_all),
 			      GTK_OBJECT (logwindow));
 
-   
+
    if (show_themes_menu)
       generate_theme_menu (GTK_MENU(themes_menu));
 
@@ -225,7 +225,7 @@
 #endif /* defined(NETSCAPE) */
 
    menu_bar  = gtk_menu_bar_new ();
-   
+
    item = gtk_menu_item_new_with_label (_("File"));
    gtk_menu_item_set_submenu (GTK_MENU_ITEM (item), file_menu);
    gtk_menu_bar_append (GTK_MENU_BAR (menu_bar), item);
@@ -243,7 +243,7 @@
    gtk_menu_bar_append (GTK_MENU_BAR (menu_bar), item);
 
    gtk_widget_show_all (menu_bar);
-   
+
    return menu_bar;
 }
 
@@ -284,7 +284,7 @@
 					    (p_array + P_HELP)->mask),
 			    (GtkSignalFunc) readme, NULL);
 #if defined(HAVE_POPEN) && defined(WWWUPDATE)
-    if (!noinet) 
+    if (!noinet)
        gtk_toolbar_append_item (GTK_TOOLBAR (toolbar),
 				NULL,
 				_("Upgrade wmakerconf-data package via HTTP."),
@@ -294,7 +294,7 @@
 				(GtkSignalFunc) upgrade, NULL);
 #endif /* HAVE_POPEN && WWWUPDATE */
 #if defined(NETSCAPE)
-    if (!noinet) 
+    if (!noinet)
        gtk_toolbar_append_item (GTK_TOOLBAR (toolbar),
 				NULL, _("Wmakerconf homepage"),
 				"Toolbar/WWW",
@@ -310,7 +310,7 @@
 /*******************************************************************************
 
 				private code
-  
+
 *******************************************************************************/
 
 static void
@@ -327,7 +327,7 @@
    if (!window)
    {
       GtkWidget *button;
-      
+
       window = gtk_dialog_new ();
       gtk_window_set_position (GTK_WINDOW (window), GTK_WIN_POS_MOUSE);
       gtk_window_set_title (GTK_WINDOW (window), _("About"));
@@ -348,7 +348,7 @@
 
       gtk_container_set_border_width (GTK_CONTAINER (GTK_DIALOG (window)->vbox), 5);
 
-      
+
       gtk_box_pack_start (GTK_BOX (GTK_DIALOG (window)->vbox),
 			  make_pixmap (PKGDATADIR "/wmakerconf.xpm", -1, -1,
 				       NULL),
@@ -373,7 +373,7 @@
 	    fclose (version);
 	 }
       }
-      
+
       gtk_box_pack_start (GTK_BOX (GTK_DIALOG (window)->vbox),
 			  gtk_label_new ("Copyright (C) 1998-2001 "
 					 "Ullrich Hafner"),
@@ -408,7 +408,7 @@
 
       if (!input)
 	 return;
-   
+
       window = gtk_dialog_new ();
       gtk_window_set_position (GTK_WINDOW (window), GTK_WIN_POS_MOUSE);
       gtk_window_set_title (GTK_WINDOW (window), _("Manual"));
@@ -426,13 +426,13 @@
       gtk_signal_connect_object (GTK_OBJECT (button), "clicked",
 				 (GtkSignalFunc) gtk_widget_destroy,
 				 GTK_OBJECT (window));
-   
+
       {
 	 GtkWidget     *text_view, *scrollw;
 	 GtkTextBuffer *text_buffer;
 	 GtkTextIter    iter;
 	 char	        buffer [MAXSTRLEN];
-      
+
 	 scrollw = gtk_scrolled_window_new (NULL, NULL);
 	 gtk_scrolled_window_set_policy (GTK_SCROLLED_WINDOW (scrollw),
 					 GTK_POLICY_AUTOMATIC,
@@ -500,10 +500,10 @@
  *  No return value.
  */
 {
-   if (!WMWritePropListToFile (orig_wmaker, orig_wmaker_fname, YES))
+   if (!WMWritePropListToFile(orig_wmaker, orig_wmaker_fname))
       warning (_("Can't revert to backupfile of `WindowMaker'. "
 		 "Please manually revert from file WindowMaker.bak."));
-   if (orig_rootmenu && !WMWritePropListToFile (orig_rootmenu, orig_rootmenu_fname, YES))
+   if (orig_rootmenu && !WMWritePropListToFile(orig_rootmenu, orig_rootmenu_fname))
       warning (_("Can't revert to backupfile of `WMRootMenu'. "
 		 "Please manually revert from file WMRootMenu.bak."));
    gtk_main_quit ();
@@ -574,7 +574,7 @@
 static void
 load_file (GtkWidget *button, gpointer data)
 /*
- *  Open browser to select new file. 
+ *  Open browser to select new file.
  */
 {
    static GtkWidget *filesel = NULL;
@@ -593,7 +593,7 @@
                           &filesel);
       gtk_signal_connect (GTK_OBJECT (fs->ok_button), "clicked",
 			  GTK_SIGNAL_FUNC (load), fs);
-      
+
       gtk_signal_connect_object (GTK_OBJECT (fs->cancel_button), "clicked",
 				 GTK_SIGNAL_FUNC (gtk_widget_destroy),
 				 GTK_OBJECT (filesel));
Seulement dans wmakerconf-2.12.new/src: menu.c~
diff -aur wmakerconf-2.12.pristine/src/rootmenu.c wmakerconf-2.12.new/src/rootmenu.c
--- wmakerconf-2.12.pristine/src/rootmenu.c	2013-03-04 14:43:58.166787490 +0100
+++ wmakerconf-2.12.new/src/rootmenu.c	2013-03-04 14:46:55.922869758 +0100
@@ -2,7 +2,7 @@
  *  rootmenu.c:		Root menu configuration
  *
  *  Written by:		Ullrich Hafner
- *  
+ *
  *  Copyright (C) 1998 Ullrich Hafner <hafner@bigfoot.de>
  *
  *  This program is free software; you can redistribute it and/or modify
@@ -71,7 +71,7 @@
 /*******************************************************************************
 
 			     local variables
-  
+
 *******************************************************************************/
 
 typedef enum {WM_MENU, WM_INCLUDE, WM_PIPE, WM_OPEN_MENU, WM_EXEC, WM_SHEXEC,
@@ -135,7 +135,7 @@
 /*******************************************************************************
 
 				prototypes
-  
+
 *******************************************************************************/
 
 static GtkCTreeNode *
@@ -199,17 +199,17 @@
 import_menu (GtkWidget *entry, gpointer data);
 static void
 set_wmakerconf (GtkWidget *menuitem, gpointer data);
-#ifdef GNOME_TO_WMAKER	    
+#ifdef GNOME_TO_WMAKER
 static void
 set_gnomemenu (GtkWidget *menuitem, gpointer data);
 #endif /* GNOME_TO_WMAKER */
 #ifdef PERL
-#	ifdef KDE_TO_WMAKER	    
+#	ifdef KDE_TO_WMAKER
 static void
 set_kdemenu (GtkWidget *menuitem, gpointer data);
 #	endif /* KDE_TO_WMAKER */
 #endif /* PERL */
-#ifdef WMCONFIG	    
+#ifdef WMCONFIG
 static void
 set_wmconfig (GtkWidget *menuitem, gpointer data);
 #else /* not WMCONFIG */
@@ -227,7 +227,7 @@
 static void
 dir_list_to_item (GtkWidget *button, gpointer data);
 static void
-tree_moved (GtkCTree *ctree, GtkCTreeNode *node, GtkCTreeNode *new_parent, 
+tree_moved (GtkCTree *ctree, GtkCTreeNode *node, GtkCTreeNode *new_parent,
 	    GtkCTreeNode *new_sibling);
 static void
 row_moved (GtkWidget *clist, gint source_row, gint dest_row);
@@ -247,7 +247,7 @@
 /*******************************************************************************
 
 				public code
-  
+
 *******************************************************************************/
 
 GtkWidget *
@@ -261,7 +261,7 @@
       GtkWidget *vbox = gtk_vbox_new (FALSE, 3);
 
       gtk_container_set_border_width (GTK_CONTAINER (vbox), 5);
-      
+
       gtk_box_pack_start (GTK_BOX (vbox),
 			  gtk_pixmap_new (p_array [P_INFO].pixmap,
 					  p_array [P_INFO].mask),
@@ -276,11 +276,11 @@
       gtk_box_pack_start (GTK_BOX (vbox),
 			  gtk_label_new (_("is in the new format.")),
 			  FALSE, TRUE, 0);
-      
+
       {
 	 GtkWidget *button;
 	 GtkWidget *bbox = gtk_hbutton_box_new ();
-	    
+
 	 gtk_button_box_set_layout (GTK_BUTTON_BOX (bbox),
 				    GTK_BUTTONBOX_SPREAD);
 	 gtk_box_pack_start (GTK_BOX (vbox), bbox, FALSE, TRUE, 5);
@@ -315,15 +315,15 @@
       }
 
       gtk_box_pack_start (GTK_BOX (page), vbox, TRUE, TRUE, 0);
-   
+
       info_message  = vbox;
       notebook_page = page;
       main_tooltips = tooltips;
-      
+
       gtk_widget_show_all (page);
       if (menu)
 	 WMReleasePropList (menu);
-      
+
       {
 	 GtkWidget *vbox = gtk_vbox_new (FALSE, 5);
 
@@ -365,7 +365,7 @@
 		       node_freeitem, NULL);
       g_node_destroy (node);
 
-      if (WMWritePropListToFile (menu, filename, YES))
+      if (WMWritePropListToFile(menu, filename))
       {
 	 menu_changed = NO;
 	 message (_("Window Maker root menu file '%s' saved."), filename);
@@ -378,7 +378,7 @@
 		       _("Can't write to menu file\n`%s'"), filename);
 	 Free (filename);
 	 WMReleasePropList (menu);
-	 
+
 	 return FALSE;			/* ERROR */
       }
    }
@@ -388,7 +388,7 @@
 /*******************************************************************************
 
 				private code
-  
+
 *******************************************************************************/
 
 static proplist_t
@@ -491,7 +491,7 @@
       }
    }
 #endif
-   
+
    /*
     *  Scrolled window for ctree
     */
@@ -513,7 +513,7 @@
    gtk_clist_set_column_auto_resize (GTK_CLIST (ctree), 0, TRUE);
    gtk_ctree_set_line_style (GTK_CTREE (ctree), GTK_CTREE_LINES_DOTTED);
    gtk_clist_set_selection_mode (GTK_CLIST (ctree), GTK_SELECTION_BROWSE);
-   gtk_container_add (GTK_CONTAINER (scrolled), GTK_WIDGET (ctree)); 
+   gtk_container_add (GTK_CONTAINER (scrolled), GTK_WIDGET (ctree));
    gtk_widget_set_usize (scrolled, 250, -1);
 
    action_box = gtk_vbox_new (FALSE, 0);
@@ -533,7 +533,7 @@
       box = gtk_hbox_new (FALSE, 5);
       gtk_container_add (GTK_CONTAINER (frame), box);
       gtk_container_set_border_width (GTK_CONTAINER (box), 5);
-      
+
       itemlabel_entry = gtk_entry_new ();
       gtk_box_pack_start (GTK_BOX (box), itemlabel_entry, TRUE, TRUE, 5);
       itemlabel_entry_sig = gtk_signal_connect (GTK_OBJECT (itemlabel_entry),
@@ -578,13 +578,13 @@
       gtk_signal_connect (GTK_OBJECT (confirm_button), "toggled",
 			  GTK_SIGNAL_FUNC (toggle_confirm), NULL);
       gtk_box_pack_start (GTK_BOX (box), confirm_button, TRUE, TRUE, 10);
-      
+
       /*
-       *  Commandline 
+       *  Commandline
        */
       box_commandline_entry = box = gtk_hbox_new (FALSE, 5);
       gtk_box_pack_start (GTK_BOX (cmd_vbox), box, FALSE, FALSE, 5);
-      
+
       {
 	 GtkWidget *hbox = gtk_hbox_new (FALSE, 0);
 
@@ -609,15 +609,15 @@
       {
 	 GtkWidget *vbox = gtk_vbox_new (FALSE, 5);
 	 GtkWidget *hbox;
-	 
+
 	 box_pipe_cmd_widget = box = gtk_hbox_new (FALSE, 5);
 	 gtk_box_pack_start (GTK_BOX (cmd_vbox), box, FALSE, FALSE, 5);
-      
+
 	 gtk_box_pack_start (GTK_BOX (box), vbox, TRUE, TRUE, 5);
 
 	 hbox = gtk_hbox_new (FALSE, 0);
 	 gtk_box_pack_start (GTK_BOX (vbox), hbox, FALSE, TRUE, 0);
-	 
+
 	 gtk_box_pack_start (GTK_BOX (hbox), gtk_label_new (_("Command:")),
 			     FALSE, TRUE, 5);
 	 pipe_command_entry = gtk_entry_new ();
@@ -627,17 +627,17 @@
 				    GTK_SIGNAL_FUNC (set_entry_text),  NULL);
 	 gtk_tooltips_set_tip (tooltips, pipe_command_entry,
 			       _("Commandline to generate dynamic menu."), NULL);
-      
+
 	 {
 	    GtkWidget *button;
 	    GtkWidget *bbox = gtk_hbutton_box_new ();
-	    
+
 	    gtk_box_pack_start (GTK_BOX (vbox), bbox, FALSE, TRUE, 5);
 
 	    button = gtk_button_new_with_label (_("Import"));
 	    gtk_button_box_set_layout (GTK_BUTTON_BOX (bbox),
 				       GTK_BUTTONBOX_SPREAD);
-	    
+
 	    gtk_box_pack_start (GTK_BOX (bbox), button, FALSE, TRUE, 5);
 	    gtk_tooltips_set_tip (tooltips, button,
 				  _("Import output of command. "
@@ -648,13 +648,13 @@
 				GTK_SIGNAL_FUNC (import_dynamic_menu), NULL);
 	 }
       }
-      
+
       /*
-       *  Windowmanager 
+       *  Windowmanager
        */
       box_wmanager_entry = box = gtk_hbox_new (FALSE, 5);
       gtk_box_pack_start (GTK_BOX (cmd_vbox), box, FALSE, FALSE, 5);
-      
+
       {
 	 GtkWidget *hbox = gtk_hbox_new (FALSE, 0);
 
@@ -671,40 +671,40 @@
 			      "If omitted, restart Window Maker."), NULL);
 
       /*
-       *  Filename of included menu 
+       *  Filename of included menu
        */
       {
 	 GtkWidget *vbox = gtk_vbox_new (FALSE, 5);
 	 GtkWidget *hbox;
-	 
+
 	 box_include_file_widget = box = gtk_hbox_new (FALSE, 5);
 	 gtk_box_pack_start (GTK_BOX (cmd_vbox), box, FALSE, FALSE, 5);
-      
+
 	 gtk_box_pack_start (GTK_BOX (box), vbox, TRUE, TRUE, 5);
 
 	 hbox = gtk_hbox_new (FALSE, 0);
 	 gtk_box_pack_start (GTK_BOX (vbox), hbox, FALSE, TRUE, 0);
-	 
+
 	 gtk_box_pack_start (GTK_BOX (hbox), gtk_label_new (_("File:")),
 			     FALSE, TRUE, 5);
 	 include_file_entry = gtk_entry_new ();
 	 gtk_box_pack_start (GTK_BOX (hbox), include_file_entry, TRUE, TRUE, 5);
-         include_file_entry_sig = gtk_signal_connect 
+         include_file_entry_sig = gtk_signal_connect
 				 (GTK_OBJECT (include_file_entry), "changed",
 				  GTK_SIGNAL_FUNC (set_entry_text),  NULL);
 	 gtk_tooltips_set_tip (tooltips, include_file_entry,
 			       _("Filename of menu to include."), NULL);
-      
+
 	 {
 	    GtkWidget *button;
 	    GtkWidget *bbox = gtk_hbutton_box_new ();
-	    
+
 	    gtk_box_pack_start (GTK_BOX (vbox), bbox, FALSE, TRUE, 5);
 
 	    button = gtk_button_new_with_label (_("Import"));
 	    gtk_button_box_set_layout (GTK_BUTTON_BOX (bbox),
 				       GTK_BUTTONBOX_SPREAD);
-	    
+
 	    gtk_box_pack_start (GTK_BOX (bbox), button, FALSE, TRUE, 5);
 	    gtk_tooltips_set_tip (tooltips, button,
 				  _("Import contents of selected menu file. "
@@ -721,12 +721,12 @@
 				  NULL);
 	    gtk_signal_connect (GTK_OBJECT (button), "clicked",
 				GTK_SIGNAL_FUNC (open_filebrowser), NULL);
-	    
+
 	 }
       }
 
       /*
-       *  Directory list 
+       *  Directory list
        */
       {
 	 GtkWidget *vbox = gtk_vbox_new (FALSE, 5);
@@ -734,10 +734,10 @@
 	 GtkWidget *scrolled;
 	 GtkWidget *clist;
 	 char	   *title = _("Directory list");
-	 
+
 	 box_dir_widget = box = gtk_hbox_new (FALSE, 5);
 	 gtk_box_pack_start (GTK_BOX (cmd_vbox), box, FALSE, FALSE, 5);
-      
+
 	 gtk_box_pack_start (GTK_BOX (box), vbox, TRUE, TRUE, 5);
 
 	 hbox = gtk_hbox_new (FALSE, 0);
@@ -781,7 +781,7 @@
 	 {
 	    GtkWidget *button;
 	    GtkWidget *bbox = gtk_hbutton_box_new ();
-	    
+
 	    gtk_box_pack_start (GTK_BOX (vbox), bbox, FALSE, TRUE, 0);
 	    gtk_button_box_set_layout (GTK_BUTTON_BOX (bbox),
 				       GTK_BUTTONBOX_SPREAD);
@@ -830,7 +830,7 @@
       box = gtk_hbox_new (FALSE, 5);
       gtk_container_add (GTK_CONTAINER (frame), box);
       gtk_container_set_border_width (GTK_CONTAINER (box), 5);
-      
+
       shortcut_widget = key_dialog ("None", tooltips, NULL, shortcut_changed,
 				    NULL);
       gtk_box_pack_start (GTK_BOX (box), shortcut_widget, TRUE, TRUE, 5);
@@ -845,7 +845,7 @@
    else
    {
       char *text = "Applications";
-      
+
       root = gtk_ctree_insert_node (GTK_CTREE (ctree), NULL, NULL,
 				    &text, 8,
 				    p_array [P_BOOK_CLOSE].pixmap,
@@ -866,7 +866,7 @@
    gtk_paned_add2 (GTK_PANED (table), action_box);
    gtk_widget_show_all (table);
    gtk_widget_set_usize (scrolled, 300, -1);
-   
+
    gtk_widget_show_all (command_box);
    gtk_widget_hide (command_box);
    gtk_widget_hide (box_shortcut_widget);
@@ -951,28 +951,28 @@
    proplist_t	pl;
    unsigned	n;
    GtkCTreeNode *node;
-	 
+
    if (!WMIsPLArray (menu) || (n = WMGetPropListItemCount (menu)) < 1)
       return NULL;			/* ERROR */
-   
+
    pl = WMGetFromPLArray (menu, 0);
    if (!WMIsPLString (pl))
       return NULL;			/* ERROR */
    text = WMGetFromPLString (pl);
-   
+
    pl = WMGetFromPLArray (menu, 1);
    if (n == 1 || WMIsPLArray (pl))	/* submenu */
    {
       unsigned k;
       item_t   *item = item_constructor (text, WM_MENU, NULL, NULL);
-      
+
       node = gtk_ctree_insert_node (GTK_CTREE (menu_tree), parent, sibling,
 				    &text, 8, NULL, NULL, NULL, NULL,
 				    FALSE, !parent);
       gtk_ctree_node_set_row_data_full (GTK_CTREE (menu_tree), node, item,
 					item_destructor);
       set_item_pixmap (node, item);
-      
+
       for (k = 1; k < n; k++)
       {
 	 pl = WMGetFromPLArray (menu, k);
@@ -987,9 +987,9 @@
       item_t	*new = item_constructor (text, WM_EXEC, NULL, NULL);
       char	*action;
       int	an;
-      
+
       action  = WMGetFromPLString (pl);
-	 
+
       if (streq (action, "SHORTCUT"))
       {
 	 if (n >= 4)			/* name SHORTCUT shortcutdef COMMAND */
@@ -1010,7 +1010,7 @@
 	 new->arg = g_strdup (WMGetFromPLString (WMGetFromPLArray (menu, 2)));
 
       action = WMGetFromPLString (pl);
-	 
+
       new->action = WM_MENU;
       for (an = 0; an < WM_LAST; an++)
 	 if (streq (action, cmd_id [an]))
@@ -1064,7 +1064,7 @@
 	    {
 	       char *path = expand_tilde (new->arg);
 	       DIR  *dir;
-	 
+
 	       if ((dir = opendir (path))) /* include one directory */
 	       {
 		  closedir (dir);
@@ -1129,7 +1129,7 @@
 
    if (!item)
       return;
-   gtk_ctree_get_node_info (GTK_CTREE (menu_tree), node, &text, 
+   gtk_ctree_get_node_info (GTK_CTREE (menu_tree), node, &text,
 			    NULL, NULL, NULL, NULL, NULL, NULL, NULL);
    g_signal_handler_block (itemlabel_entry, itemlabel_entry_sig);
    gtk_entry_set_text (GTK_ENTRY (itemlabel_entry), text);
@@ -1180,7 +1180,7 @@
    item_t	*item  = gtk_ctree_node_get_row_data (GTK_CTREE (menu_tree),
 						      node);
    action_e	an;
-   
+
    for (an = 0; an < WM_LAST; an++)
       if (streq (text, cmd_name [an]))
       {
@@ -1228,7 +1228,7 @@
    gtk_widget_hide (box_wmanager_entry);
    gtk_widget_hide (box_dir_widget);
    gtk_widget_hide (box_suffix_button);
-      
+
    if (item->action > WM_MENU)
       gtk_option_menu_set_history (GTK_OPTION_MENU (command_menu),
 				   item->action - 1);
@@ -1286,7 +1286,7 @@
 	 char	*start, *end;
 	 char	*dir;
 	 bool_t strip_suffix = NO;
-	 
+
 	 gtk_clist_clear (GTK_CLIST (dir_clist));
 	 start = item->arg;
 
@@ -1382,7 +1382,7 @@
    if (ptr)
    {
       char *text = "Command";
-      
+
       node = gtk_ctree_insert_node (GTK_CTREE (menu_tree),
 				    parent, selection, &text, 8,
 				    p_array [P_EXEC].pixmap,
@@ -1396,7 +1396,7 @@
    else
    {
       char *text = "Submenu";
-      
+
       node = gtk_ctree_insert_node (GTK_CTREE (menu_tree),
 				    parent, selection, &text, 8,
 				    p_array [P_BOOK_CLOSE].pixmap,
@@ -1432,7 +1432,7 @@
       else if (GTK_CTREE_NODE_PREV (selection))
 	 gtk_ctree_select (GTK_CTREE (menu_tree),
 			   GTK_CTREE_NODE_PREV (selection));
-      
+
       gtk_ctree_remove_node (GTK_CTREE (menu_tree), selection);
       toggle_save (menu_changed = YES, NULL);
    }
@@ -1488,7 +1488,7 @@
    {
       GtkCTreeNode *parent = GTK_CTREE_ROW (selection)->parent;
       GtkCTreeNode *node;
-      
+
       if (!parent || (!GTK_CTREE_ROW (selection)->is_leaf &&
 		      !GTK_CTREE_ROW (selection)->children))
       {
@@ -1522,15 +1522,15 @@
    gint		column;
    GtkCTreeNode *node;
 
-   if (!gtk_clist_get_selection_info (GTK_CLIST (menu_tree), event->x, event->y, 
+   if (!gtk_clist_get_selection_info (GTK_CLIST (menu_tree), event->x, event->y,
 				      &row, &column)
        || event->button != 3)
       return FALSE;
 
    node = GTK_CTREE_NODE (g_list_nth (GTK_CLIST (menu_tree)->row_list, row));
-   
+
    gtk_ctree_select (GTK_CTREE (menu_tree), node);
-   
+
    {
       static GtkWidget  *menu = NULL;
       GtkWidget		*menu_item;
@@ -1554,14 +1554,14 @@
 	 menu_item = gtk_menu_item_new ();
 	 gtk_menu_append (GTK_MENU (menu), menu_item);
 	 gtk_widget_show (menu_item);
-	 
+
 	 menu_item = gtk_menu_item_new_with_label (_("Insert WMAKERCONF menu"));
 	 gtk_menu_append (GTK_MENU (menu), menu_item);
 	 gtk_widget_show (menu_item);
 	 gtk_signal_connect (GTK_OBJECT(menu_item), "activate",
 			     GTK_SIGNAL_FUNC (set_wmakerconf), NULL);
 
-#ifdef GNOME_TO_WMAKER	    
+#ifdef GNOME_TO_WMAKER
 	 menu_item = gtk_menu_item_new_with_label (_("Insert GNOME menu"));
 	 gtk_menu_append (GTK_MENU (menu), menu_item);
 	 gtk_widget_show (menu_item);
@@ -1570,7 +1570,7 @@
 #endif /* GNOME_TO_WMAKER */
 
 #ifdef PERL
-#	ifdef KDE_TO_WMAKER	    
+#	ifdef KDE_TO_WMAKER
 	 menu_item = gtk_menu_item_new_with_label (_("Insert KDE menu"));
 	 gtk_menu_append (GTK_MENU (menu), menu_item);
 	 gtk_widget_show (menu_item);
@@ -1578,7 +1578,7 @@
 			     GTK_SIGNAL_FUNC (set_kdemenu), NULL);
 #	endif /* KDE_TO_WMAKER */
 #endif /* PERL */
-#ifdef WMCONFIG	    
+#ifdef WMCONFIG
 	 menu_item = gtk_menu_item_new_with_label (_("Insert RedHat menu"));
 	 gtk_menu_append (GTK_MENU (menu), menu_item);
 	 gtk_widget_show (menu_item);
@@ -1604,7 +1604,7 @@
 	 menu_item = gtk_menu_item_new ();
 	 gtk_menu_append (GTK_MENU (menu), menu_item);
 	 gtk_widget_show (menu_item);
-	 
+
       	 menu_item = gtk_menu_item_new_with_label (_("Cut item/submenu"));
 	 gtk_menu_append (GTK_MENU (menu), menu_item);
 	 gtk_widget_show (menu_item);
@@ -1620,7 +1620,7 @@
 	 menu_item = gtk_menu_item_new ();
 	 gtk_menu_append (GTK_MENU (menu), menu_item);
 	 gtk_widget_show (menu_item);
-	 
+
 	 menu_item = gtk_menu_item_new_with_label (_("Expand submenus"));
 	 gtk_menu_append (GTK_MENU (menu), menu_item);
 	 gtk_widget_show (menu_item);
@@ -1633,7 +1633,7 @@
 	 gtk_signal_connect (GTK_OBJECT(menu_item), "activate",
 			     GTK_SIGNAL_FUNC (collapse_recursive), NULL);
       }
-      
+
       gtk_menu_popup (GTK_MENU (menu), NULL, NULL, NULL, NULL, 3, event->time);
    }
    return TRUE;
@@ -1670,7 +1670,7 @@
 	  gpointer data)
 {
    item_t *item;
-   
+
    if (!cnode || !gnode || (!(item = gnode->data)))
       return FALSE;
    else
@@ -1755,7 +1755,7 @@
       GdkPixmap	*closed, *opened;
       GdkBitmap	*mask_closed, *mask_opened;
       gboolean	is_leaf, expanded;
-      
+
       gtk_ctree_get_node_info (GTK_CTREE (menu_tree), node, &old, &spacing,
 			       &closed, &mask_closed, &opened, &mask_opened,
 			       &is_leaf, &expanded);
@@ -1829,7 +1829,7 @@
 	 else
 	    gtk_file_selection_set_filename (fs, filename);
       }
-      
+
    }
 
    if (!GTK_WIDGET_VISIBLE (filesel))
@@ -1874,7 +1874,7 @@
 							 node);
    char		*filename;
    item_t	*item_new;
-   
+
    filename = expand_tilde (data ? data : item_old->arg);
    if (!strlen (filename))
       return;
@@ -1883,7 +1883,7 @@
    {
       FILE *file;
       char *tmp = g_strdup_printf ("Library/WindowMaker/%s", filename);
-      
+
       Free (filename);
       filename = get_gnustep_path (tmp);
       Free (tmp);
@@ -1901,13 +1901,13 @@
 	 fclose (file);
       }
    }
-   
+
    menu = convert_to_proplist (filename);
    Free (filename);
 
    if (!menu)
       return;				/* ERROR */
-   
+
    gtk_clist_freeze (GTK_CLIST (menu_tree));
    new = build_tree (GTK_CTREE_ROW (node)->parent, node, menu);
 
@@ -1921,7 +1921,7 @@
    else
       item_new->name = g_strdup_printf (_("Imported file '%s'"),
 					item_old->arg);
-      
+
    {
       char	*old;
       guint8	spacing;
@@ -1937,16 +1937,16 @@
 			       is_leaf, expanded);
    }
    remove_node (widget, NULL);
-   
+
    gtk_clist_thaw (GTK_CLIST (menu_tree));
    gtk_ctree_select (GTK_CTREE (menu_tree), new);
-   
+
    gtk_entry_select_region (GTK_ENTRY (itemlabel_entry), 0, -1);
    gtk_widget_grab_focus (itemlabel_entry);
    toggle_save (menu_changed = YES, NULL);
 }
 
-#ifdef GNOME_TO_WMAKER	    
+#ifdef GNOME_TO_WMAKER
 static void
 set_gnomemenu (GtkWidget *menuitem, gpointer data)
 {
@@ -1961,7 +1961,7 @@
 #endif /* GNOME_TO_WMAKER */
 
 #ifdef PERL
-#	ifdef KDE_TO_WMAKER	    
+#	ifdef KDE_TO_WMAKER
 static void
 set_kdemenu (GtkWidget *menuitem, gpointer data)
 {
@@ -2120,7 +2120,7 @@
 							 node);
    char		*tmp_name = get_temporary_file_name ();
    char		*command  = g_strdup_printf ("%s > %s", item->arg, tmp_name);
-   
+
    if (system (command))
    {
       dialog_popup (DIALOG_ERROR, NULL, NULL,
@@ -2167,14 +2167,14 @@
 				 GTK_OBJECT (filesel));
       {
 	 char *filename;
-	 
+
 	 if (GTK_CLIST (dir_clist)->rows > 0)
 	    gtk_clist_get_text (GTK_CLIST (dir_clist),
 				GPOINTER_TO_INT (GTK_CLIST (dir_clist)->selection->data),
 				0, &filename);
 	 else
 	    filename = "";
-	 
+
 	 if (streq (filename, ""))
 	    gtk_file_selection_set_filename (fs, WMAKERDATADIR "/");
 	 else
@@ -2275,7 +2275,7 @@
 }
 
 static void
-tree_moved (GtkCTree *ctree, GtkCTreeNode *node, GtkCTreeNode *new_parent, 
+tree_moved (GtkCTree *ctree, GtkCTreeNode *node, GtkCTreeNode *new_parent,
 	    GtkCTreeNode *new_sibling)
 {
    toggle_save (menu_changed = YES, NULL);
@@ -2295,7 +2295,7 @@
    char         *filename = g_strdup (cfilename);
    char		*tmp_name = NULL;
    FILE		*file     = NULL;
-   
+
    /*
     *  Check if file is already in proplist format
     */
@@ -2317,14 +2317,14 @@
       Free (prefixes[0]);
       Free (prefixes[1]);
    }
-   
+
    if (file)
    {
       while ((c = fgetc (file)) != EOF && isspace (c))
          ;
       fclose (file);
    }
-   
+
    if (c == '(')
       menu = read_proplist (filename);
    else
@@ -2348,7 +2348,7 @@
       Free (command);
       menu = read_proplist (tmp_name);
    }
-   
+
    if (!menu || !WMIsPLArray (menu))
    {
       dialog_popup (DIALOG_ERROR, NULL, NULL,
@@ -2356,13 +2356,13 @@
 		      "Please check syntax of this file."), tmp_name);
       if (menu)
 	 WMReleasePropList (menu);
-      
+
       return NULL;			/* ERROR */
    }
-   
+
    if (tmp_name)
       delete_file_or_dir (tmp_name);
-   
+
    return menu;
 }
 
Seulement dans wmakerconf-2.12.new/src: rootmenu.c~
diff -aur wmakerconf-2.12.pristine/src/themebrowser.c wmakerconf-2.12.new/src/themebrowser.c
--- wmakerconf-2.12.pristine/src/themebrowser.c	2013-03-04 14:43:58.166787490 +0100
+++ wmakerconf-2.12.new/src/themebrowser.c	2013-03-04 14:47:35.863487444 +0100
@@ -2,7 +2,7 @@
  *  themebrowser.c:	Theme browser
  *
  *  Written by:		Ullrich Hafner
- *  
+ *
  *  Copyright (C) 2000 Ullrich Hafner <hafner@bigfoot.de>
  *
  *  This program is free software; you can redistribute it and/or modify
@@ -72,7 +72,7 @@
 /*****************************************************************************
 
 			      global variables
-  
+
 *****************************************************************************/
 
 extern proplist_t  windowmaker;
@@ -113,7 +113,7 @@
 /*****************************************************************************
 
 			         prototypes
-  
+
 *****************************************************************************/
 
 static void
@@ -125,7 +125,7 @@
 		  gpointer data);
 static void
 insert_dnd_elements (GtkCList *clist, const char *start);
-static void  
+static void
 drag_data_received (GtkWidget *widget, GdkDragContext *context, gint x, gint y,
 		    GtkSelectionData *data, guint info, guint time);
 static void
@@ -228,7 +228,7 @@
 node_drag_compare (GtkCTree *ctree, GtkCTreeNode *source_node,
 		   GtkCTreeNode *new_parent, GtkCTreeNode *new_sibling);
 static void
-tree_moved (GtkCTree *ctree, GtkCTreeNode *node, GtkCTreeNode *new_parent, 
+tree_moved (GtkCTree *ctree, GtkCTreeNode *node, GtkCTreeNode *new_parent,
 	    GtkCTreeNode *new_sibling);
 static void
 expand_recursive (GtkWidget *widget, gpointer ptr);
@@ -238,7 +238,7 @@
 /*****************************************************************************
 
 			        public code
-  
+
 *****************************************************************************/
 
 void
@@ -250,20 +250,20 @@
    gtk_menu_append (themes_menu, item);
    gtk_signal_connect (GTK_OBJECT (item), "activate",
 		       GTK_SIGNAL_FUNC (install_theme_dialog), NULL);
-   
+
 #ifdef GETSTYLE
    item = gtk_menu_item_new_with_label (_("Save..."));
    gtk_menu_append (themes_menu, item);
    gtk_signal_connect (GTK_OBJECT(item), "activate",
 		       GTK_SIGNAL_FUNC (save_theme_dialog), NULL);
 #endif /* GETSTYLE */
-   
+
    item = gtk_menu_item_new_with_label (_("Directory list..."));
    gtk_menu_append (themes_menu, item);
    gtk_widget_show (item);
    gtk_signal_connect (GTK_OBJECT(item), "activate",
 		       GTK_SIGNAL_FUNC (select_directory_dialog), NULL);
-   
+
    item = gtk_menu_item_new_with_label (_("Update previews"));
    gtk_menu_append (themes_menu, item);
    gtk_signal_connect (GTK_OBJECT (item), "activate",
@@ -280,7 +280,7 @@
    GtkWidget *scrolled;
    GtkWidget *hbox;
    GtkWidget *vbox;
-   
+
    /*
     *  Scrolled window for ctree
     */
@@ -294,32 +294,32 @@
    tree = gtk_dndtree_new (1, 0);
    gtk_object_set_user_data (GTK_OBJECT (tree), tree);
    gtk_clist_set_row_height (GTK_CLIST (tree), 18);
-   
+
    gtk_clist_set_selection_mode (GTK_CLIST (tree), GTK_SELECTION_BROWSE);
    gtk_clist_set_column_auto_resize (GTK_CLIST (tree), 0, TRUE);
    gtk_ctree_set_line_style (GTK_CTREE (tree), GTK_CTREE_LINES_DOTTED);
    gtk_ctree_set_drag_compare_func (GTK_CTREE (tree), node_drag_compare);
    gtk_signal_connect (GTK_OBJECT (tree), "tree_move",
 		       GTK_SIGNAL_FUNC (tree_moved), NULL);
-   
-   gtk_container_add (GTK_CONTAINER (scrolled), GTK_WIDGET (tree)); 
+
+   gtk_container_add (GTK_CONTAINER (scrolled), GTK_WIDGET (tree));
 
    build_theme_list ();
-   
+
    gtk_signal_connect (GTK_OBJECT(tree), "tree_select_row",
 		       GTK_SIGNAL_FUNC (selection_made), NULL);
    gtk_signal_connect (GTK_OBJECT (tree), "button_press_event",
 		       GTK_SIGNAL_FUNC (context_menu), NULL);
-   
+
    /*
     *  Horizontal container (tree, theme info)
     */
    hbox = gtk_hbox_new (FALSE, 0);
 
    gtk_container_set_border_width (GTK_CONTAINER (hbox), 5);
-   
+
    vbox = gtk_vbox_new (FALSE, 0);
-   
+
    gtk_box_pack_start (GTK_BOX (vbox), scrolled, TRUE, TRUE, 0);
 
    {
@@ -332,7 +332,7 @@
 			  GTK_SIGNAL_FUNC (toggle_selection_mode), tree);
       gtk_box_pack_start (GTK_BOX (vbox), button, FALSE, FALSE, 0);
    }
-   
+
    gtk_box_pack_start (GTK_BOX (hbox), vbox, TRUE, TRUE, 0);
 
    vbox = gtk_vbox_new (TRUE, 0);
@@ -342,7 +342,7 @@
    gtk_box_pack_start (GTK_BOX (box), hbox, TRUE, TRUE, 0);
 
    gtk_widget_show_all (hbox);
-   
+
    return hbox;
 }
 
@@ -361,17 +361,17 @@
    proplist_t   dirlist = WMGetFromPLDictionary (windowmaker, pltheme);
    GtkCTreeNode *sibling = NULL;
    unsigned 	 n;
-      
+
    WMReleasePropList (pltheme);
 
    gtk_clist_freeze (GTK_CLIST (tree));
    gtk_clist_clear (GTK_CLIST (tree));
-   
+
    for (n = 0; n < WMGetPropListItemCount (dirlist); n++)
    {
       proplist_t pldir   = WMGetFromPLArray (dirlist, n);
       char	 *dirname = expand_tilde (WMGetFromPLString (pldir));
-	 
+
       sibling = append_directory (dirname, GTK_CTREE (tree), NULL, sibling);
       gtk_ctree_sort_recursive (GTK_CTREE (tree), sibling);
    }
@@ -384,7 +384,7 @@
 /*****************************************************************************
 
 			  preview generation
-  
+
 *****************************************************************************/
 
 void
@@ -410,7 +410,7 @@
       if (info->istheme)
       {
 	 char *filename;
-      
+
 	 filename = theme_image_filename (info->fullname, "WorkspaceBack", NO);
 	 if (filename)
 	    background_list = g_list_append (background_list, filename);
@@ -455,7 +455,7 @@
       gtk_signal_connect (GTK_OBJECT (progress_window), "delete_event",
 			  GTK_SIGNAL_FUNC (gtk_true), NULL);
       gtk_widget_set_usize (progress_window, 250, -1);
-   
+
       vbox = gtk_vbox_new (FALSE, 5);
       gtk_container_add (GTK_CONTAINER (progress_window), vbox);
       gtk_container_set_border_width (GTK_CONTAINER (vbox), 10);
@@ -464,15 +464,15 @@
 
       {
 	 GtkAdjustment *adj;
-	 
+
 	 adj = (GtkAdjustment *) gtk_adjustment_new (0, 1, 300, 0, 0, 0);
-	 
+
 	 progress_bar = gtk_progress_bar_new_with_adjustment (adj);
       }
 
       gtk_box_pack_start (GTK_BOX (vbox), progress_bar, FALSE, TRUE, 5);
       gtk_widget_show_all (progress_window);
-      
+
       {
 	 GList **listptr = (GList **) ptr;
 	 int 	 n;
@@ -482,7 +482,7 @@
 
 	 if (listptr && *listptr)
 	    m += g_list_length (*listptr);
-	 
+
 	 for (n = 0; n < (int) g_list_length (background_list); n++)
 	    compute_preview (progress_bar, progress_label, n, m,
 			     g_list_nth_data (background_list, n), 160, 120);
@@ -498,7 +498,7 @@
 	 if (listptr && *listptr)
 	 {
 	    GList *list = *listptr;
-	    
+
 	    for (n = 0; n < (int) g_list_length (list); n++)
 	    {
 	       previewdata_t *pd    = g_list_nth_data (list, n);
@@ -569,7 +569,7 @@
 	    WMRemoveFromPLDictionary (theme, depkeypl);
 	 WMReleasePropList (depkeypl);
       }
-      
+
       /*
        * Modify style file that doesn't contain resizebarback
        */
@@ -644,11 +644,11 @@
 
 	    keydata   = WMGetFromPLDictionary (keydef, plupdateptr);
 	    keyupdate = WMGetFromPLDictionary (keydef, plupdate);
-		  
+
 	    if (keyupdate && keydata)
 	    {
 	       gpointer   data;
-	       update_fct update;  
+	       update_fct update;
 
 	       data   = * (gpointer *) WMGetPLDataBytes (keydata);
 	       update = * (update_fct *) WMGetPLDataBytes (keyupdate);
@@ -686,7 +686,7 @@
    proplist_t plupdateptr = WMCreatePLString ("UpdatePtr");
    proplist_t keydef      = WMGetFromPLDictionary (wmconfig, key);
    proplist_t data;
-   
+
    data = WMCreatePLDataWithBytes ((unsigned char *) &ptr, sizeof (gpointer));
    WMPutInPLDictionary (keydef, plupdateptr, data);
    WMReleasePropList (data);
@@ -701,7 +701,7 @@
 /*****************************************************************************
 
 			     private code
-  
+
 *****************************************************************************/
 
 static void
@@ -740,9 +740,9 @@
    bool_t 	 single_selection = NO;
    bool_t 	 istheme 	  = NO;
    bool_t	 toplevel 	  = NO;
-   
+
    if (!gtk_clist_get_selection_info (GTK_CLIST (ctree),
-				      event->x, event->y, 
+				      event->x, event->y,
 				      &row, &column) || event->button != 3)
       return FALSE;
 
@@ -752,17 +752,17 @@
    if (single_selection)
    {
       themeinfo_t *info = gtk_ctree_node_get_row_data (tree, selection);
-      
+
       istheme  = info->istheme;
       toplevel = !info->parent;
    }
    else
       istheme = NO;
-   
+
    {
       static GtkWidget *menu = NULL;
       GtkWidget	       *menu_item;
-      
+
       if (menu)
 	 gtk_widget_destroy (menu);
 
@@ -799,7 +799,7 @@
       }
 #endif /* GETSTYLE */
 
-      
+
       if (!toplevel)
       {
 	 menu_item = gtk_menu_item_new_with_label (_("Remove..."));
@@ -808,7 +808,7 @@
 	 gtk_signal_connect (GTK_OBJECT(menu_item), "activate",
 			     GTK_SIGNAL_FUNC (remove_theme_dialog), NULL);
       }
-      
+
       if (single_selection && !toplevel)
       {
 	 menu_item = gtk_menu_item_new_with_label (_("New directory..."));
@@ -825,7 +825,7 @@
 	 menu_item = gtk_menu_item_new ();
 	 gtk_menu_append (GTK_MENU (menu), menu_item);
 	 gtk_widget_show (menu_item);
-      
+
 	 menu_item = gtk_menu_item_new_with_label (_("Preview"));
 	 gtk_menu_append (GTK_MENU (menu), menu_item);
 	 gtk_widget_show (menu_item);
@@ -849,7 +849,7 @@
       menu_item = gtk_menu_item_new ();
       gtk_menu_append (GTK_MENU (menu), menu_item);
       gtk_widget_show (menu_item);
-      
+
       menu_item = gtk_menu_item_new_with_label (_("Install..."));
       gtk_menu_append (GTK_MENU (menu), menu_item);
       gtk_widget_show (menu_item);
@@ -861,7 +861,7 @@
       gtk_widget_show (menu_item);
       gtk_signal_connect (GTK_OBJECT(menu_item), "activate",
 			  GTK_SIGNAL_FUNC (select_directory_dialog), NULL);
-      
+
       menu_item = gtk_menu_item_new_with_label (_("Expand directory tree"));
       gtk_menu_append (GTK_MENU (menu), menu_item);
       gtk_widget_show (menu_item);
@@ -874,7 +874,7 @@
       gtk_signal_connect (GTK_OBJECT(menu_item), "activate",
 			  GTK_SIGNAL_FUNC (collapse_recursive), NULL);
 
-#ifdef PREVIEWS	 
+#ifdef PREVIEWS
       preview_update_menu
 	 = menu_item = gtk_menu_item_new_with_label (_("Update previews"));
       gtk_menu_append (GTK_MENU (menu), menu_item);
@@ -884,7 +884,7 @@
       gtk_widget_set_sensitive (preview_update_menu, !previews_active);
 
 #endif /* PREVIEWS */
-      
+
       gtk_menu_popup (GTK_MENU (menu), NULL, NULL, NULL, NULL, 3, event->time);
    }
    return TRUE;
@@ -893,7 +893,7 @@
 /*****************************************************************************
 
 			   build theme tree
-  
+
 *****************************************************************************/
 
 static GtkCTreeNode *
@@ -921,9 +921,9 @@
 			     sibling, NO);
       else
 	 root = append_node ((char *) dirname, tree, parent, sibling, NO);
-      
+
       /*
-       *  Insert themes and subdirs  
+       *  Insert themes and subdirs
        */
       {
 	 struct dirent *file;
@@ -940,7 +940,7 @@
 	       char *path   = g_strconcat (dirname, "/", file->d_name, NULL);
 	       DIR  *subdir = opendir (path);
 	       char *ext;
-	       
+
 	       if (subdir)		/* .themed or subdir */
 	       {
 		  if (!strstr (path, ".themed"))
@@ -968,7 +968,7 @@
       }
 
       closedir (dir);
-      
+
       return root;
    }
 }
@@ -1001,7 +1001,7 @@
    }
    else
       info->fullname = g_strdup (dirname);
-   
+
    info->istheme 	  = theme;
    info->parent   = parent;
    info->suffix   = NULL;
@@ -1015,21 +1015,21 @@
    if (theme)
    {
       char *new = g_strdup (dirname);
-      
+
       if (strlen (new) > strlen (".themed")
 	  && streq (new + strlen (new) - strlen (".themed"), ".themed"))
       {
 	 info->suffix = g_strdup (".themed");
 	 *(new + strlen (new) - strlen (".themed")) = 0;
       }
-      
+
       if (strlen (new) > strlen (".style")
 	  && streq (new + strlen (new) - strlen (".style"), ".style"))
       {
 	 info->suffix = g_strdup (".style");
 	 *(new + strlen (new) - strlen (".style")) = 0;
       }
-      
+
       info->name = g_strdup (new);
       gtk_ctree_set_node_info (tree, root, new, 8,
 			       p_array [P_GNUSTEP].pixmap,
@@ -1046,9 +1046,9 @@
 			       p_array [P_BOOK_OPEN].pixmap,
 			       p_array [P_BOOK_OPEN].mask, FALSE, expanded);
    }
-   
+
    gtk_ctree_node_set_row_data_full (tree, root, info, info_destructor);
-   
+
    return root;
 }
 
@@ -1070,7 +1070,7 @@
 /*****************************************************************************
 
 			miscellaneous operations
-  
+
 *****************************************************************************/
 
 static void
@@ -1108,7 +1108,7 @@
 
       if (pinfo->istheme)
 	 return FALSE;
-   
+
       if (info->parent != new_parent)
 	 return TRUE;
       else
@@ -1191,7 +1191,7 @@
    GdkPixmap *closed, *opened;
    GdkBitmap *mask_closed, *mask_opened;
    gboolean   is_leaf, expanded;
-   
+
    gtk_ctree_get_node_info (tree, node, &old, &spacing,
 			    &closed, &mask_closed, &opened, &mask_opened,
 			    &is_leaf, &expanded);
@@ -1203,7 +1203,7 @@
 /*****************************************************************************
 
 			rename theme operation
-  
+
 *****************************************************************************/
 
 static void
@@ -1217,12 +1217,12 @@
    GtkCTree     *tree 	   = (GtkCTree *) ptr;
    GtkCTreeNode *selection = get_selected_node (tree);
    themeinfo_t 	*info;
-   
+
    if (!selection)
       return;
 
    info = gtk_ctree_node_get_row_data (tree, selection);
-	  
+
    /*
     *  Dialog window
     */
@@ -1234,13 +1234,13 @@
 
       gtk_box_pack_start (GTK_BOX (GTK_DIALOG (window)->vbox),
 			  vbox, TRUE, TRUE, 0);
-      
+
       /*
        *  Window
        */
       gtk_container_set_border_width (GTK_CONTAINER (vbox), 10);
       gtk_window_set_position (GTK_WINDOW (window), GTK_WIN_POS_MOUSE);
-      
+
       gtk_window_set_title (GTK_WINDOW (window), _("Rename theme"));
       gtk_signal_connect_object (GTK_OBJECT (window), "delete_event",
 				 GTK_SIGNAL_FUNC (gtk_widget_destroy),
@@ -1268,14 +1268,14 @@
       gtk_object_set_user_data (GTK_OBJECT (entry), info);
       gtk_box_pack_start (GTK_BOX (vbox), entry, TRUE, TRUE, 0);
       gtk_widget_grab_focus (entry);
-   
+
       /*
        *  Cancel and OK buttons
        */
       {
 	 GtkWidget *hbox = gtk_hbutton_box_new ();
 	 GtkWidget *button;
-	 
+
 	 gtk_button_box_set_spacing (GTK_BUTTON_BOX (hbox), 5);
 	 gtk_button_box_set_layout (GTK_BUTTON_BOX (hbox), GTK_BUTTONBOX_END);
 	 gtk_box_pack_start (GTK_BOX (GTK_DIALOG (window)->action_area), hbox,
@@ -1382,7 +1382,7 @@
 /*****************************************************************************
 
 		    remove themes (files and dirs)
-  
+
 *****************************************************************************/
 
 static void
@@ -1409,7 +1409,7 @@
       {
 	 gtk_box_pack_start (GTK_BOX (vbox), gtk_label_new (""),
 			     FALSE, TRUE, 0);
-	 
+
 	 {
 	    GList    *selection = GTK_CLIST (tree)->selection;
 	    unsigned  n;
@@ -1438,7 +1438,7 @@
 	       themeinfo_t  *info  = gtk_ctree_node_get_row_data (tree,
 								  theme);
 	       char *text;
-	       
+
 	       text = g_strdup_printf (_("Remove files and directories "
 					 "of theme `%s'"), info->name);
 	       gtk_box_pack_start (GTK_BOX (vbox), gtk_label_new (text),
@@ -1452,7 +1452,7 @@
 				   FALSE, TRUE, 0);
 	    }
 	 }
-	 
+
 	 gtk_box_pack_start (GTK_BOX (vbox), gtk_label_new (""),
 			     FALSE, TRUE, 0);
 	 gtk_box_pack_start (GTK_BOX (vbox),
@@ -1469,7 +1469,7 @@
 				       GTK_SELECTION_EXTENDED);
 	 {
 	    GtkWidget *scrolled = gtk_scrolled_window_new (NULL, NULL);
-	       
+
 	    gtk_container_set_border_width (GTK_CONTAINER (scrolled), 5);
 	    gtk_scrolled_window_set_policy (GTK_SCROLLED_WINDOW (scrolled),
 					    GTK_POLICY_AUTOMATIC,
@@ -1484,7 +1484,7 @@
 	 {
 	    GtkWidget *hbox = gtk_hbutton_box_new ();
 	    GtkWidget *button;
-	 
+
 	    gtk_box_pack_start (GTK_BOX (GTK_DIALOG (window)->action_area), hbox,
 				TRUE, TRUE, 0);
 
@@ -1500,7 +1500,7 @@
 				       GTK_SIGNAL_FUNC (gtk_widget_destroy),
 				       GTK_OBJECT (window));
 	    GTK_WIDGET_SET_FLAGS (button, GTK_CAN_DEFAULT);
-    
+
 	    button = gtk_button_new_with_label (_("Cancel"));
 	    gtk_box_pack_start (GTK_BOX (hbox), button, TRUE, TRUE, 5);
 	    gtk_signal_connect_object (GTK_OBJECT (button), "clicked",
@@ -1516,7 +1516,7 @@
 	 {
 	    unsigned  n;
 	    GList    *selection = GTK_CLIST (tree)->selection;
-      
+
 	    for (n = 0; n < g_list_length (selection); n++)
 	    {
 	       GtkCTreeNode *theme = g_list_nth_data (selection, n);
@@ -1524,7 +1524,7 @@
 
 	       if (!info->parent)
 		  continue;
-		  
+
 	       gtk_clist_insert (GTK_CLIST (filelist), -1, &info->fullname);
 	       if (info->suffix && streq (info->suffix, ".themed"))
 	       {
@@ -1532,7 +1532,7 @@
 		  if (themedir)
 		  {
 		     struct dirent *file;
-		  
+
 		     while ((file = readdir (themedir)))
 		     {
 			if (!streq (file->d_name, ".")
@@ -1565,7 +1565,7 @@
 		     {
 			char *pname = preview_name (name);
 			char *path  = get_pixmap_path (pname);
-			
+
 			gtk_clist_insert (GTK_CLIST (filelist), -1, &name);
 			if (path)
 			{
@@ -1607,7 +1607,7 @@
    GtkCList	*filelist = GTK_CLIST (user_data);
    gint		row       = GPOINTER_TO_INT (data);
    char		*path;
-   
+
    gtk_clist_get_text (filelist, row, 0, &path);
    delete_file_or_dir (path);
 }
@@ -1615,7 +1615,7 @@
 /*****************************************************************************
 
 		       new directory operation
-  
+
 *****************************************************************************/
 
 static void
@@ -1625,7 +1625,7 @@
    GtkCTreeNode *selection = get_selected_node (tree);
    themeinfo_t 	*info;
    themeinfo_t 	*pinfo;
-   
+
    if (!selection)
       return;
 
@@ -1650,7 +1650,7 @@
        */
       gtk_container_set_border_width (GTK_CONTAINER (vbox), 10);
       gtk_window_set_position (GTK_WINDOW (window), GTK_WIN_POS_MOUSE);
-      
+
       gtk_window_set_title (GTK_WINDOW (window), _("New directory"));
       gtk_signal_connect_object (GTK_OBJECT (window), "delete_event",
 				 GTK_SIGNAL_FUNC (gtk_widget_destroy),
@@ -1659,20 +1659,20 @@
       text = g_strdup_printf (_("Make new subdirectory in\n`%s':"),
 			      pinfo->fullname);
       gtk_object_set_user_data (GTK_OBJECT (entry), pinfo);
-      
+
       gtk_box_pack_start (GTK_BOX (vbox), gtk_label_new (text), TRUE, TRUE, 0);
       g_free (text);
       gtk_entry_select_region (GTK_ENTRY (entry), 0, -1);
       gtk_box_pack_start (GTK_BOX (vbox), entry, TRUE, TRUE, 0);
       gtk_widget_grab_focus (entry);
-   
+
       /*
        *  Cancel and OK buttons
        */
       {
 	 GtkWidget *hbox = gtk_hbutton_box_new ();
 	 GtkWidget *button;
-	 
+
 	 gtk_button_box_set_spacing (GTK_BUTTON_BOX (hbox), 5);
 	 gtk_button_box_set_layout (GTK_BUTTON_BOX (hbox), GTK_BUTTONBOX_END);
 	 gtk_box_pack_start (GTK_BOX (GTK_DIALOG (window)->action_area), hbox,
@@ -1714,7 +1714,7 @@
 
    if (info)
       directory = g_strconcat (info->fullname, "/", directory, NULL);
-   
+
    if (!make_directory (directory))
    {
       build_theme_list ();
@@ -1756,14 +1756,14 @@
 			      GTK_OBJECT (window));
 
    path_dialog (vbox, pltheme, array, tooltips, info);
-   
+
    /*
     *  Close button
     */
    {
       GtkWidget *hbox = gtk_hbutton_box_new ();
       GtkWidget *button;
-	 
+
       gtk_button_box_set_spacing (GTK_BUTTON_BOX (hbox), 5);
       gtk_button_box_set_layout (GTK_BUTTON_BOX (hbox), GTK_BUTTONBOX_END);
       gtk_box_pack_start (GTK_BOX (GTK_DIALOG (window)->action_area), hbox,
@@ -1782,7 +1782,7 @@
 /*****************************************************************************
 
 			 theme preview window
-  
+
 *****************************************************************************/
 
 static GtkWidget *
@@ -1809,7 +1809,7 @@
    gtk_box_pack_start (GTK_BOX (hbox), ibox, FALSE, TRUE, 0);
    gtk_box_pack_start (GTK_BOX (ibox), iconback, TRUE, TRUE, 0);
    gtk_container_set_border_width (GTK_CONTAINER (ibox), 5);
-   
+
    ibox         = gtk_vbox_new (FALSE, 0);
    titlebarback = make_pixmap (PKGDATADIR "/black.xpm", 234, 22, NULL);
    gtk_box_pack_start (GTK_BOX (ibox),
@@ -1818,7 +1818,7 @@
    gtk_box_pack_start (GTK_BOX (vbox), ibox, FALSE, TRUE, 5);
    gtk_box_pack_start (GTK_BOX (ibox), titlebarback, TRUE, TRUE, 0);
    gtk_container_set_border_width (GTK_CONTAINER (ibox), 0);
-   
+
    ibox         	= gtk_vbox_new (FALSE, 0);
    unfocus_titlebarback = make_pixmap (PKGDATADIR "/black.xpm", 234, 22, NULL);
    gtk_box_pack_start (GTK_BOX (ibox),
@@ -1827,7 +1827,7 @@
    gtk_box_pack_start (GTK_BOX (vbox), ibox, FALSE, TRUE, 5);
    gtk_box_pack_start (GTK_BOX (ibox), unfocus_titlebarback, TRUE, TRUE, 0);
    gtk_container_set_border_width (GTK_CONTAINER (ibox), 0);
-   
+
    ibox                = gtk_vbox_new (FALSE, 0);
    parent_titlebarback = make_pixmap (PKGDATADIR "/black.xpm", 234, 22, NULL);
    gtk_box_pack_start (GTK_BOX (ibox),
@@ -1836,7 +1836,7 @@
    gtk_box_pack_start (GTK_BOX (vbox), ibox, FALSE, TRUE, 5);
    gtk_box_pack_start (GTK_BOX (ibox), parent_titlebarback, TRUE, TRUE, 0);
    gtk_container_set_border_width (GTK_CONTAINER (ibox), 0);
-   
+
    ibox      	 = gtk_vbox_new (FALSE, 0);
    menutitleback = make_pixmap (PKGDATADIR "/black.xpm", 234, 22, NULL);
    gtk_box_pack_start (GTK_BOX (ibox),
@@ -1845,7 +1845,7 @@
    gtk_box_pack_start (GTK_BOX (vbox), ibox, FALSE, TRUE, 5);
    gtk_box_pack_start (GTK_BOX (ibox), menutitleback, TRUE, TRUE, 0);
    gtk_container_set_border_width (GTK_CONTAINER (ibox), 0);
-   
+
    ibox     	= gtk_vbox_new (FALSE, 0);
    menuitemback = make_pixmap (PKGDATADIR "/black.xpm", 234, 22, NULL);
    gtk_box_pack_start (GTK_BOX (ibox),
@@ -1854,9 +1854,9 @@
    gtk_box_pack_start (GTK_BOX (vbox), ibox, FALSE, TRUE, 5);
    gtk_box_pack_start (GTK_BOX (ibox), menuitemback, TRUE, TRUE, 0);
    gtk_container_set_border_width (GTK_CONTAINER (ibox), 0);
-   
+
    gtk_widget_show_all (frame);
-   
+
    return frame;
 }
 
@@ -1893,7 +1893,7 @@
       }
       else
 	 theme_gradient (info->fullname, "WorkspaceBack", workspaceback);
-      
+
       filename = theme_image_filename (info->fullname, "IconBack", NO);
       if (filename)
       {
@@ -1908,7 +1908,7 @@
       }
       else
 	 theme_gradient (info->fullname, "IconBack", iconback);
-      
+
       filename = theme_image_filename (info->fullname, "FTitleBack", NO);
       if (filename)
       {
@@ -2007,7 +2007,7 @@
       if (!theme)
       {
 	 char *fname2 = g_strconcat (name, "/style", NULL);
-	 
+
 	 theme = read_proplist (fname2);
 	 Free (fname2);
       }
@@ -2022,7 +2022,7 @@
 	 if (theme)
 	    WMReleasePropList (theme);
 	 cache_theme = NULL;
-	 
+
 	 return NULL;
       }
    }
@@ -2034,14 +2034,14 @@
       proplist_t plattribute = WMCreatePLString ((char *) attribute);
       proplist_t value;
       char       *path = NULL;
-      
+
       value = WMGetFromPLDictionary (theme, plattribute);
       if (value && WMIsPLArray (value) && WMGetPropListItemCount (value) > 2)
       {
 	 proplist_t type   = WMGetFromPLArray (value, 0);
 	 proplist_t file   = WMGetFromPLArray (value, 1);
 	 char	    *ttype = WMGetFromPLString (type);
-	       
+
 	 if ((!combined && strcaseeq (ttype + 1, "pixmap"))
 	     || (combined && strcaseeq (ttype + 2, "gradient")
 		 && *ttype == 't'))
@@ -2066,10 +2066,10 @@
 {
    proplist_t theme;
    int	      width, height;
-   
+
    width  = GTK_WIDGET (preview)->requisition.width;
    height = GTK_WIDGET (preview)->requisition.height;
-   
+
    /*
     *  Use cached theme file or replace cache with selected theme
     */
@@ -2086,7 +2086,7 @@
       if (!theme)
       {
 	 char *fname2 = g_strconcat (name, "/style", NULL);
-      
+
 	 theme = read_proplist (fname2);
 	 Free (fname2);
       }
@@ -2105,7 +2105,7 @@
 	 return;
       }
    }
-   
+
    /*
     *  Extract theme gradients
     */
@@ -2113,20 +2113,20 @@
       proplist_t plattribute = WMCreatePLString ((char *) attribute);
       proplist_t value       = WMGetFromPLDictionary (theme, plattribute);
       bool_t	 done = NO;
-      
+
 #if defined(PREVIEWS) && !defined(CONVERT)
-   
+
       if (value && WMIsPLArray (value) && WMGetPropListItemCount (value) > 1)
       {
 	 proplist_t type   = WMGetFromPLArray (value, 0);
 	 char	    *ttype = WMGetFromPLString (type);
-	       
+
 	 if (strcaseeq (ttype + 1, "gradient")
 	     || strcaseeq (ttype + 2, "gradient"))
 	 {
 	    gtype_e  gtype;
 	    unsigned offset = strcaseeq (ttype + 2, "gradient") ? 1 : 0;
-	    
+
 	    if (*(ttype + offset) == 'h')
 	       gtype = HGRADIENT;
 	    else if (*(ttype + offset) == 'v')
@@ -2159,7 +2159,7 @@
 /*****************************************************************************
 
 			  load or set theme
-  
+
 *****************************************************************************/
 
 #ifdef GETSTYLE
@@ -2174,16 +2174,16 @@
       return;
 
    info = gtk_ctree_node_get_row_data (tree, selection);
-   
+
    if (!load_attributes (info->fullname, NULL))	/* try new style theme */
    {
       char *path   = g_strdup (info->fullname);
       char *fname2 = g_strconcat (info->fullname, "/style", NULL);
-      
+
       if (!load_attributes (fname2, path))
 	 dialog_popup (DIALOG_ERROR, NULL, NULL,
 		       _("Can't open selected theme."));
-      
+
       Free (path);
       Free (fname2);
    }
@@ -2201,7 +2201,7 @@
 /*****************************************************************************
 
 			 theme preview dialog
-  
+
 *****************************************************************************/
 
 #ifdef GETSTYLE
@@ -2229,7 +2229,7 @@
       {
 	 GList	  *previewlist = NULL;
 	 unsigned  n;
-	 
+
 	 for (n = 0; n < g_list_length (selection); n++)
 	 {
 	    GtkCTreeNode *theme = g_list_nth_data (selection, n);
@@ -2255,7 +2255,7 @@
    char  *quotedname = protect_quotes (g_strdup (name));
    char  *cmdline    = g_strconcat (SETSTYLE, " \"", quotedname, "\"", NULL);
    char  *text;
-   
+
    if (g_list_length (list) > 1)
       text = g_strdup_printf (_("Can't show preview of theme `%s'.\n"
 				"Please check `stderr' for more details."),
@@ -2263,13 +2263,13 @@
    else
       text = g_strdup_printf (_("Can't revert to old theme.\n"
 				"Please check `stderr' for more details."));
-   
+
    gtk_widget_hide (main_window);
    shell_command (cmdline, text);
    Free (text);
    Free (cmdline);
    Free (quotedname);
-   
+
    if (g_list_length (list) == 1)	/* revert */
    {
       delete_file_or_dir (name);
@@ -2294,7 +2294,7 @@
 /*****************************************************************************
 
 			      save theme
-  
+
 *****************************************************************************/
 
 #ifdef GETSTYLE
@@ -2308,7 +2308,7 @@
    GtkCTreeNode *selection = get_selected_node (tree);
    themeinfo_t 	*info;
    char 	*dirname;
-   
+
    if (!selection)
       return;
 
@@ -2321,7 +2321,7 @@
       themeinfo_t *pinfo = gtk_ctree_node_get_row_data (tree, info->parent);
       dirname 		 = pinfo->fullname;
    }
-   
+
    {
       GtkWidget *window = gtk_dialog_new ();
       GtkWidget *entry  = gtk_entry_new ();
@@ -2330,13 +2330,13 @@
       gtk_box_pack_start (GTK_BOX (GTK_DIALOG (window)->vbox), vbox,
 			  TRUE, TRUE, 0);
       gtk_container_set_border_width (GTK_CONTAINER (vbox), 5);
-      
+
       gtk_window_set_position (GTK_WINDOW (window), GTK_WIN_POS_MOUSE);
       gtk_window_set_title (GTK_WINDOW (window), _("Save a theme"));
       gtk_signal_connect_object (GTK_OBJECT (window), "delete_event",
 				 GTK_SIGNAL_FUNC (gtk_widget_destroy),
 				 GTK_OBJECT (window));
-      
+
       /*
        *  Theme name
        */
@@ -2345,7 +2345,7 @@
 	 GtkWidget *frame = gtk_frame_new (_("Theme name"));
 	 char      *text  = g_strdup_printf (_("Save current settings to new"
 					       " theme in\n`%s':"), dirname);
-	 
+
 	 gtk_container_set_border_width (GTK_CONTAINER (box), 5);
 	 gtk_frame_set_label_align (GTK_FRAME (frame), 0.5, 0.5);
 	 gtk_container_set_border_width (GTK_CONTAINER (frame), 5);
@@ -2356,7 +2356,7 @@
 	 Free (text);
 	 gtk_box_pack_start (GTK_BOX (box), entry, TRUE, TRUE, 0);
       }
-      
+
       /*
        *  Theme format
        */
@@ -2377,7 +2377,7 @@
 	 gtk_toggle_button_set_active (GTK_TOGGLE_BUTTON (button), TRUE);
 	 group  = gtk_radio_button_group (GTK_RADIO_BUTTON (button));
 	 gtk_box_pack_start (GTK_BOX (fvbox), button, TRUE, TRUE, 0);
-	 
+
 #ifdef GZIP
 	 button = gtk_radio_button_new_with_label (group, _("http://wm.themes.org theme archive (.tar.gz)"));
 #else  /* not GZIP */
@@ -2388,7 +2388,7 @@
 	 gtk_box_pack_start (GTK_BOX (fvbox), button, TRUE, TRUE, 0);
 	 gtk_object_set_user_data (GTK_OBJECT (entry), button);
       }
-#else  /* not TAR */      
+#else  /* not TAR */
       gtk_object_set_user_data (GTK_OBJECT (entry), NULL);
 #endif /* not TAR */
 
@@ -2399,7 +2399,7 @@
       {
 	 GtkWidget *hbox  = gtk_hbutton_box_new ();
 	 GtkWidget *button1, *button2;
-	 
+
 	 gtk_box_pack_start (GTK_BOX (GTK_DIALOG (window)->action_area), hbox,
 			     TRUE, TRUE, 5);
 
@@ -2420,7 +2420,7 @@
 			     GTK_SIGNAL_FUNC (set_themename), button1);
 	 gtk_signal_connect (GTK_OBJECT (entry), "activate",
 			     GTK_SIGNAL_FUNC (activate_themename), button1);
-	 
+
 	 button2 = gtk_button_new_with_label (_("Cancel"));
 	 gtk_box_pack_start (GTK_BOX (hbox), button2, TRUE, TRUE, 5);
 	 gtk_signal_connect_object (GTK_OBJECT (button2), "clicked",
@@ -2493,14 +2493,14 @@
       bool_t  exists1 = NO;
       char   *filename2;
       bool_t  exists2 = NO;
-      
+
       filename1 = g_strconcat (pathname, "/", themename, ".tar", NULL);
       exists1 	= file_exists (filename1);
 #ifdef GZIP
       filename2 = g_strconcat (pathname, "/", themename, ".tar.gz", NULL);
       exists2 	= file_exists (filename2);
 #endif /* GZIP */
-      
+
       if (exists1 && exists2)
       {
 	 dialog_popup (DIALOG_QUESTION, save_theme_backend, ptr,
@@ -2570,7 +2570,7 @@
    char       *tmpdir 	= NULL;
    char	      *filename;
    GList      *oldfiles = NULL;
-   
+
 #ifdef TAR
    archive = button && GTK_TOGGLE_BUTTON (button)->active;
    /*
@@ -2580,7 +2580,7 @@
    if (archive)
    {
       char *subdir;
-      
+
       tmpdir = make_temporary_directory ();
 
       subdir = g_strconcat (tmpdir, "/Themes", NULL);
@@ -2622,7 +2622,7 @@
       proplist_t pltype     = WMCreatePLString ("Type");
       char	 *stylename = g_strconcat (filename, "/style", NULL);
       proplist_t theme      = WMCreatePLDictionary (NULL, NULL, NULL);
-      
+
       oldfiles = remove_file_from_list (oldfiles, stylename);
       for (n = 0; n < WMGetPropListItemCount (theme_keys); n++)
       {
@@ -2638,7 +2638,7 @@
 		&& WMIsPLArray (value) && WMGetPropListItemCount (value) >= 2)
 	    {
 	       char *ttype = WMGetFromPLString (WMGetFromPLArray (value, 0));
-		  
+
 	       if (strcaseeq (ttype + 1, "pixmap")
 		   || (strcaseeq (ttype + 2, "gradient") && *ttype == 't'))
 	       {
@@ -2700,12 +2700,12 @@
       while (oldfiles)
       {
 	 char *tmp = oldfiles->data;
-	 
+
 	 delete_file_or_dir (tmp);
 	 oldfiles = g_list_remove (oldfiles, tmp);
 	 Free (tmp);
       }
-      if (!WMWritePropListToFile (theme, stylename, YES))
+      if (!WMWritePropListToFile(theme, stylename))
       {
 	 dialog_popup (DIALOG_ERROR, NULL, NULL,
 		       _("Can't save theme file\n`%s'\n"
@@ -2722,7 +2722,7 @@
       WMReleasePropList (pltype);
       Free (stylename);
    }
-   
+
 #ifdef TAR
    if (archive)
    {
@@ -2732,7 +2732,7 @@
       char *tarname;
       char *quotedtar;
       char *quotedcd;
-      
+
       tmp = strrchr (cdname, '/');
       *tmp = 0;
       tmp = strrchr (cdname, '/');
@@ -2741,7 +2741,7 @@
       tarname 	= g_strconcat (pathname, "/", themename, ".tar", NULL);
       quotedtar = protect_quotes (g_strdup (tarname));
       quotedcd  = protect_quotes (g_strdup (cdname));
-      cmd 	= g_strconcat ("cd ", " \"", quotedcd, "\" && ", TAR, 
+      cmd 	= g_strconcat ("cd ", " \"", quotedcd, "\" && ", TAR,
 			       " -c -f \"", quotedtar,"\" * ", NULL);
       if (shell_command (cmd, NULL))		/* create tar archive */
       {
@@ -2763,7 +2763,7 @@
 	 Free (filename);
 	 return;
       }
-      
+
 #ifdef GZIP
       {
 	 char *text = g_strdup_printf (_("Can't pack theme file\n`%s'"),
@@ -2783,7 +2783,7 @@
 	 Free (text);
       }
 #endif /* not GZIP */
-      
+
       Free (tarname);
       Free (quotedtar);
       Free (cdname);
@@ -2807,7 +2807,7 @@
    if (themedir)
    {
       struct dirent *file;
-		  
+
       while ((file = readdir (themedir)))
       {
 	 if (!streq (file->d_name, ".") && !streq (file->d_name, ".."))
@@ -2851,7 +2851,7 @@
  *  Generate list of attributes that define a Window Maker theme
  *
  *  Side effects:
- *	fills global property array of attributes: 'theme_keys'	
+ *	fills global property array of attributes: 'theme_keys'
  */
 {
    char		*tmpthemename  = get_temporary_file_name ();
@@ -2867,7 +2867,7 @@
    theme = read_proplist (tmpthemename);
    if (!theme)
    {
-      dialog_popup (DIALOG_ERROR, NULL, NULL, 
+      dialog_popup (DIALOG_ERROR, NULL, NULL,
 		    _("Can't open temporary theme file.\n"
 		      "Please check `stderr' for more details."));
       delete_file_or_dir (tmpthemename);
@@ -2902,7 +2902,7 @@
 
    Free (cmdline);
    Free (quotedname);
-   
+
    return success;
 }
 
@@ -2911,7 +2911,7 @@
 /*****************************************************************************
 
 			  theme installation
-  
+
 *****************************************************************************/
 
 static void
@@ -2926,7 +2926,7 @@
    GtkCTreeNode *selection = get_selected_node (tree);
    themeinfo_t 	*info;
    char 	*dirname;
-   
+
    if (!selection)
       return;
 
@@ -2949,16 +2949,16 @@
       GtkWidget *box = gtk_vbox_new (FALSE, 0);
 
       gtk_container_set_border_width (GTK_CONTAINER (box), 5);
-      
+
       filelist = gtk_clist_new (1);
       window   = gtk_dialog_new ();
       vbox     = GTK_BOX (GTK_DIALOG (window)->vbox);
 
       gtk_object_set_data (GTK_OBJECT (filelist), "path", dirname);
-      
+
       gtk_window_set_position (GTK_WINDOW (window), GTK_WIN_POS_MOUSE);
       gtk_object_set_user_data (GTK_OBJECT (window), filelist);
-      
+
       gtk_window_set_title (GTK_WINDOW (window), _("Install themes"));
       gtk_signal_connect_object (GTK_OBJECT (window), "delete_event",
 				 GTK_SIGNAL_FUNC (gtk_widget_destroy),
@@ -2990,14 +2990,14 @@
 	 gtk_container_set_border_width (GTK_CONTAINER (hbox), 5);
 
 	 init_dnd (filelist);
-	 
+
 	 gtk_clist_set_column_auto_resize (GTK_CLIST (filelist), 0, YES);
 	 gtk_clist_column_titles_passive (GTK_CLIST (filelist));
 	 gtk_clist_set_selection_mode (GTK_CLIST (filelist),
 				       GTK_SELECTION_EXTENDED);
 	 {
 	    GtkWidget *scrolled = gtk_scrolled_window_new (NULL, NULL);
-	    
+
 	    gtk_container_set_border_width (GTK_CONTAINER (scrolled), 5);
 	    gtk_scrolled_window_set_policy (GTK_SCROLLED_WINDOW (scrolled),
 					    GTK_POLICY_AUTOMATIC,
@@ -3017,14 +3017,14 @@
 				 "(or use drag and drop with your "
 				 "file manager and WWW browser)."), NULL);
       }
-      
+
       /*
        *  Buttons
        */
       {
 	 GtkWidget *hbox  = gtk_hbutton_box_new ();
 	 GtkWidget *button2;
-	 
+
 	 gtk_button_box_set_spacing (GTK_BUTTON_BOX (hbox), 5);
 	 gtk_button_box_set_layout (GTK_BUTTON_BOX (hbox),
 				    GTK_BUTTONBOX_END);
@@ -3077,10 +3077,10 @@
 static void
 open_theme_browser (GtkWidget *button, gpointer data)
 /*
- *  Open file browser to select themes. 
+ *  Open file browser to select themes.
  */
 {
-   static GtkWidget *filesel = NULL; 
+   static GtkWidget *filesel = NULL;
 
    if (!filesel)
    {
@@ -3131,7 +3131,7 @@
    char      *qthemedir;
    gint	      timer;
    pid_t      pid;
-   
+
    gtk_widget_hide (gtk_widget_get_toplevel (widget));
    if (strlen (themedir) == 0)
    {
@@ -3141,7 +3141,7 @@
    }
    themedir  = expand_tilde (themedir);
    qthemedir = protect_quotes (g_strdup (themedir));
-   
+
    /*
     *  Generate a progressbar and window
     */
@@ -3149,7 +3149,7 @@
    gtk_window_set_position (GTK_WINDOW (progress_window), GTK_WIN_POS_MOUSE);
    gtk_window_set_title (GTK_WINDOW (progress_window), _("Install themes"));
    gtk_widget_set_usize (progress_window, 250, -1);
-   
+
    vbox = gtk_vbox_new (FALSE, 5);
    gtk_box_pack_start (GTK_BOX (GTK_DIALOG (progress_window)->vbox),
 		       vbox, TRUE, TRUE, 0);
@@ -3159,14 +3159,14 @@
 
    {
       GtkAdjustment *adj;
-	 
+
       adj = (GtkAdjustment *) gtk_adjustment_new (0, 1, 300, 0, 0, 0);
-	 
+
       progress_bar = gtk_progress_bar_new_with_adjustment (adj);
       gtk_progress_set_activity_mode (GTK_PROGRESS (progress_bar), TRUE);
       gtk_progress_bar_set_activity_step (GTK_PROGRESS_BAR (progress_bar), 5);
       gtk_progress_bar_set_activity_blocks (GTK_PROGRESS_BAR (progress_bar), 4);
-      
+
       timer = gtk_timeout_add (100, progress_timer, progress_bar);
    }
 
@@ -3182,9 +3182,9 @@
       gtk_signal_connect (GTK_OBJECT (progress_window), "delete_event",
 			  GTK_SIGNAL_FUNC (delete_button), cancel);
    }
-      
+
    gtk_widget_show_all (progress_window);
-      
+
    for (n = 0; n < g_list_length (files); n++)
    {
       char *orig_filename      = NULL;
@@ -3193,7 +3193,7 @@
       char *unpacked_filename  = NULL;
       char *qunpacked_filename = NULL;
       char *tmp_filename       = NULL;
-      
+
       gtk_clist_get_text (install_list,
 			  GPOINTER_TO_INT (g_list_nth_data (files, n)),
 			  0, &orig_filename);
@@ -3215,7 +3215,7 @@
        *  Get theme via WWW
        */
       if (!strneq (orig_filename, "file:/", strlen ("file:/")))
-#ifdef WWWREQUEST      
+#ifdef WWWREQUEST
       {
 	 char *tmpthemename = get_temporary_file_name ();
 
@@ -3250,7 +3250,7 @@
       /*
        *  Now lets install the new theme file
        */
-      
+
       qinstall_filename = protect_quotes (g_strdup (install_filename));
 
       {
@@ -3315,7 +3315,7 @@
 	    Free (tmp);
 	 }
 #endif /* BUNZIP2 */
-	 
+
 	 if (unpacked_filename)		/* unpacked file has been created ? */
 	 {
 	    if (tmp_filename)
@@ -3324,8 +3324,8 @@
 	 }
 	 else				/* still the same */
 	 {
-	    unpacked_filename  = g_strdup (install_filename); 
-	    qunpacked_filename = g_strdup (qinstall_filename); 
+	    unpacked_filename  = g_strdup (install_filename);
+	    qunpacked_filename = g_strdup (qinstall_filename);
 	 }
 
 	 {
@@ -3391,7 +3391,7 @@
 
    fs 	= GTK_FILE_SELECTION (gtk_object_get_user_data (GTK_OBJECT (widget)));
    list = gtk_file_selection_get_selections (fs);
-   
+
    themelist = GTK_CLIST (ptr);
    for (i = 0; list[i]; i++)
    {
@@ -3402,7 +3402,7 @@
       Free (tmp);
    }
    g_strfreev (list);
-   
+
    return TRUE;
 }
 
@@ -3439,13 +3439,13 @@
 static void
 init_dnd (GtkWidget *widget)
 {
-   gtk_drag_dest_set (widget, GTK_DEST_DEFAULT_ALL, target_table, n_targets, 
+   gtk_drag_dest_set (widget, GTK_DEST_DEFAULT_ALL, target_table, n_targets,
 		      GDK_ACTION_COPY | GDK_ACTION_MOVE);
    gtk_signal_connect (GTK_OBJECT (widget), "drag_data_received",
 		       GTK_SIGNAL_FUNC (drag_data_received), NULL);
 }
 
-static void  
+static void
 drag_data_received (GtkWidget *widget, GdkDragContext *context, gint x, gint y,
 		    GtkSelectionData *data, guint info, guint time)
 {
@@ -3471,14 +3471,14 @@
 	  || strneq (start, "file:/", strlen ("file:/")))
    {
       char *end;
-	 
+
       if ((end = strstr (start + 1, "file:/")) ||
 	  (end = strstr (start + 1, "http://")) ||
 	  (end = strstr (start + 1, "ftp://")))
       {
 	 char		*tmp;
 	 const char	*last = end;
-	    
+
 	 while (isspace (*--last))
 	    ;
 	 tmp = g_strndup (start, last - start + 1);
@@ -3490,7 +3490,7 @@
       {
 	 char		*tmp;
 	 const char	*last = start + strlen (start);
-	    
+
 	 while (isspace (*--last))
 	    ;
 	 tmp = g_strndup (start, last - start + 1);
@@ -3505,7 +3505,7 @@
 /*****************************************************************************
 
 		      theme preview computation
-  
+
 *****************************************************************************/
 
 static void
@@ -3516,12 +3516,12 @@
    char *pname;
    char *path;
    char *filename;
-   
+
    if (!name)
       return;
    else
       filename = g_strdup (name);
-   
+
    pname = preview_name (name);
    path  = get_pixmap_path (pname);
 
@@ -3544,7 +3544,7 @@
       }
       else
 	 closedir (dir);
-      
+
       filename = protect_quotes (filename);
       pname    = protect_quotes (pname);
       {
@@ -3616,7 +3616,7 @@
 	 }
       }
    }
-   else if (streq (str + 2, "gradient")) 
+   else if (streq (str + 2, "gradient"))
       value = WMGetFromPLArray (texture, 1);
    else if (streq (str + 1, "pixmap"))
       value = WMGetFromPLArray (texture, 2);
@@ -3627,7 +3627,7 @@
 static gint timer_index = 0;
 
 static void
-tree_moved (GtkCTree *ctree, GtkCTreeNode *node, GtkCTreeNode *new_parent, 
+tree_moved (GtkCTree *ctree, GtkCTreeNode *node, GtkCTreeNode *new_parent,
 	    GtkCTreeNode *new_sibling)
 {
    if (node && new_parent)
@@ -3636,7 +3636,7 @@
       themeinfo_t *pinfo    = gtk_ctree_node_get_row_data (tree, new_parent);
       char 	  *fullname = g_strconcat (pinfo->fullname, "/",
 					   info->name, info->suffix, NULL);
-      
+
       info->parent = new_parent;
       rename_file_or_dir (info->fullname, fullname);
       timer_index = gtk_timeout_add (20, (GtkFunction) update_themes_timeout,
Seulement dans wmakerconf-2.12.new/src: themebrowser.c~
diff -aur wmakerconf-2.12.pristine/src/window.c wmakerconf-2.12.new/src/window.c
--- wmakerconf-2.12.pristine/src/window.c	2013-03-04 14:43:58.163454089 +0100
+++ wmakerconf-2.12.new/src/window.c	2013-03-04 14:48:14.440750674 +0100
@@ -2,7 +2,7 @@
  *  window.c:		GTK stuff
  *
  *  Written by:		Ullrich Hafner
- *  
+ *
  *  Copyright (C) 1998 Ullrich Hafner <hafner@bigfoot.de>
  *
  *  This program is free software; you can redistribute it and/or modify
@@ -87,7 +87,7 @@
 /*****************************************************************************
 
 			     global variables
-  
+
 *****************************************************************************/
 
 bool_t	     changed     = NO;
@@ -107,7 +107,7 @@
 /*****************************************************************************
 
 			       prototypes
-  
+
 *****************************************************************************/
 
 void
@@ -134,13 +134,13 @@
 /*****************************************************************************
 
 			       public code
-  
+
 *****************************************************************************/
 
 void
 root_window (const char *conffile, const node *sections,
 	     int sections_restriction_type, bool_t noinet,
-	     GtkWidget *logwindow,  proplist_t wmc, 
+	     GtkWidget *logwindow,  proplist_t wmc,
 	     proplist_t panel, proplist_t wmlist)
 /*
  *  Create root window and call the event loop of GTK
@@ -150,7 +150,7 @@
 {
    GtkWidget  *box1;
    GtkWidget  *notebook;
-#ifndef FREEBSD_SYSTEM   
+#ifndef FREEBSD_SYSTEM
    GtkWidget  *progress_window = NULL;
    GtkWidget  *progress_label  = NULL;
    GtkWidget  *progress_bar    = NULL;
@@ -171,9 +171,9 @@
    bool_t      section_found   = NO;
    GtkWidget  *iconbox 	       = gtk_hbox_new (FALSE, 0);
    char       *section 	       = NULL;      /* will point to something if only
-					       one section will be shown*/      
+					       one section will be shown*/
+
 
-   
 #if defined(PREVIEWS) && !defined(CONVERT)
    init_wraster_lib ();
 #endif /* defined(PREVIEWS) && !defined(CONVERT) */
@@ -185,22 +185,22 @@
       section = sections->name;
 
    /*
-    *  Progress bar window (only if not on FreeBSD and section is not given) 
+    *  Progress bar window (only if not on FreeBSD and section is not given)
     */
-#ifndef FREEBSD_SYSTEM   
+#ifndef FREEBSD_SYSTEM
    if (!section)
    {
       GtkWidget *vbox;
-      
+
       progress_window = gtk_window_new (GTK_WINDOW_TOPLEVEL);
       gtk_window_set_title (GTK_WINDOW (progress_window),
 			    PACKAGE " " VERSION " init ...");
-	 
+
       gtk_container_set_border_width (GTK_CONTAINER (progress_window), 10);
       gtk_signal_connect (GTK_OBJECT (progress_window), "delete_event",
 			  GTK_SIGNAL_FUNC (gtk_true), NULL);
       gtk_widget_set_usize (progress_window, 250, -1);
-      
+
       vbox = gtk_vbox_new (FALSE, 0);
       gtk_container_add (GTK_CONTAINER (progress_window), vbox);
 
@@ -209,9 +209,9 @@
 
       {
 	 GtkAdjustment *adj;
-	 
+
 	 adj = (GtkAdjustment *) gtk_adjustment_new (0, 1, 300, 0, 0, 0);
-	 
+
 	 progress_bar = gtk_progress_bar_new_with_adjustment (adj);
 	 gtk_progress_set_format_string (GTK_PROGRESS (progress_bar), "[%p%%]");
 	 gtk_progress_set_show_text (GTK_PROGRESS (progress_bar), YES);
@@ -229,7 +229,7 @@
    {
       GdkVisual		*gdkvisual;
       GdkColormap	*gdkcmap;
-      
+
       gdk_imlib_init ();
       gdkvisual = gdk_imlib_get_visual ();
       gdkcmap   = gdk_imlib_get_colormap ();
@@ -244,7 +244,7 @@
 	 use_imlib = NO;
    }
 #endif /* HAVE_IMLIB */
-   
+
    gtk_widget_push_visual (gdk_rgb_get_visual ());
    gtk_widget_push_colormap (gdk_rgb_get_cmap ());
 
@@ -285,12 +285,12 @@
    else
       gtk_box_pack_start (GTK_BOX(box1), toolbar = make_toolbar (noinet),
 			  FALSE, TRUE, 0);
-   
+
    while (gtk_events_pending())		/* FreeBSD workaround */
       gtk_main_iteration();
 
    /*
-    *  Notebook for all different wmakerconf sections 
+    *  Notebook for all different wmakerconf sections
     */
    notebook = gtk_notebook_new ();
    gtk_notebook_set_homogeneous_tabs (GTK_NOTEBOOK (notebook), FALSE);
@@ -306,7 +306,7 @@
 
    /*
     *  Generate notebook page for every section.
-    *  Section information is extracted from config file 'WMWmakerconf'. 
+    *  Section information is extracted from config file 'WMWmakerconf'.
     */
    {
       proplist_t  tab_orig = WMGetPLDictionaryKeys (panel);
@@ -353,11 +353,11 @@
 	    char       *thissecname = WMGetFromPLString (thispanel);
 	    const node *cur;
 	    bool_t 	matches;
-	    
+
 	    for (cur = sections, matches = NO; cur && !matches; cur = cur->next)
 	       if (strcaseeq (thissecname, cur->name))
 		  matches = YES;
-	     
+
 	    if (sections &&
 		((matches && sections_restriction_type==NO)
 		 || (!matches && sections_restriction_type==YES)))
@@ -371,12 +371,12 @@
 	  */
 	 {
 	    char *path = g_strconcat (PKGDATADIR, "/", WMGetFromPLString (icon), NULL);
-	    
+
 	    page = create_page (GTK_NOTEBOOK (notebook), D_(WMGetFromPLString (info)),
 				path, TRUE);
 	    Free (path);
 	 }
-	 
+
 	 while (gtk_events_pending())		/* FreeBSD workaround */
 	    gtk_main_iteration();
 
@@ -404,9 +404,9 @@
 	       GtkWidget *hbox 	= gtk_hbox_new (FALSE, 0);
 	       char 	 *path 	= g_strconcat (PKGDATADIR, "/",
 					       WMGetFromPLString (icon), NULL);
-	       
+
 	       pixmap = gdk_pixmap_create_from_xpm (main_window->window, &mask,
-						    background, path);	       
+						    background, path);
 	       gtk_notebook_set_show_tabs (GTK_NOTEBOOK (notebook), FALSE);
 	       gtk_notebook_set_show_border (GTK_NOTEBOOK (notebook), FALSE);
 	       image  = gtk_pixmap_new (pixmap, mask);
@@ -430,12 +430,12 @@
 					  GTK_SHADOW_ETCHED_IN);
 	       gtk_container_set_border_width (GTK_CONTAINER (frame), 5);
 	       gtk_container_add (GTK_CONTAINER (frame), box);
-	       
+
 	       gtk_container_add (GTK_CONTAINER (page), frame);
 	    }
 	    else
 	       gtk_container_add (GTK_CONTAINER (page), box);
-		       
+
 	    gtk_widget_show_all (page);
 
 	    while (gtk_events_pending())		/* FreeBSD workaround */
@@ -470,7 +470,7 @@
 
    if (!section_found)
       error (_("No sections to show!"));
-   
+
    while (gtk_events_pending())		/* FreeBSD workaround */
       gtk_main_iteration();
 
@@ -497,11 +497,11 @@
 	 char	    *type;
 	 proplist_t ptype;
 	 proplist_t pentry;
-	 
+
 	 if (strcaseeq (WMGetFromPLString (group), "None"))
 	    continue;
-	 
-#ifndef FREEBSD_SYSTEM   
+
+#ifndef FREEBSD_SYSTEM
 	 /*
 	  *  Update of progress bar window
 	  */
@@ -513,7 +513,7 @@
 	    gtk_widget_draw (progress_window, NULL);
 	 }
 #endif /* not FREEBSD_SYSTEM */
-	 
+
 	 while (gtk_events_pending())
 	    gtk_main_iteration();
 
@@ -530,11 +530,11 @@
 	    char        *thissecname = WMGetFromPLString (group);
 	    const node*  cur;
 	    bool_t 	 matches;
-	    
+
 	    for(cur = sections, matches = NO; cur && !matches; cur = cur->next)
 	       if (strncaseeq(thissecname,cur->name,cur->length))
 		  matches = YES;
-	     
+
 	    if (sections &&
 		((matches && sections_restriction_type==NO)
 		 || (!matches && sections_restriction_type==YES)))
@@ -554,13 +554,13 @@
 
 	    if ((pos = strchr (groupname, '/')))
 	       *pos = 0;
-	    
+
 	    pgroup = WMCreatePLString (groupname);
 	    pentry = WMGetFromPLDictionary (panel, pgroup);
 	    pbox   = WMGetFromPLDictionary (pentry, plwidget);
 	    ptype  = WMGetFromPLDictionary (pentry, pltype);
 	    WMReleasePropList (pgroup);
-	    
+
 	    if (!pentry || !pbox || !ptype)
 	       continue;
 
@@ -570,9 +570,9 @@
 
 	       if ((pos = strchr (subname, '/')))
 		  *pos = 0;
-	       
+
 	       pgroup = WMCreatePLString (subname);
-	       pentry = WMGetFromPLDictionary (ptype, pgroup); 
+	       pentry = WMGetFromPLDictionary (ptype, pgroup);
 	       ptype  = WMGetFromPLDictionary (pentry, pltype);
 	       WMReleasePropList (pgroup);
 
@@ -605,7 +605,7 @@
 	       {
 		  GtkWidget *frame;
 		  frame = gtk_object_get_user_data (GTK_OBJECT (page_box));
-		  
+
 		  if (frame && GTK_IS_WIDGET (frame)
 		      && !GTK_WIDGET_VISIBLE (frame))
 		     gtk_widget_show_all (frame);
@@ -619,7 +619,7 @@
 
 	 while (gtk_events_pending())
 	    gtk_main_iteration();
- 
+
 	 /*
 	  *  Use different dialogs for different attribute types
 	  */
@@ -646,12 +646,12 @@
 	 }
 	 else if (strcaseeq ("Font", type) || strcaseeq ("Color", type)
 		  || strcaseeq ("TextColor", type)
-		  || strcaseeq ("Texture", type)) 
+		  || strcaseeq ("Texture", type))
 	 {
 	    GtkWidget	*widget;
 	    proplist_t	data;
 
-	    if (strcaseeq ("Font", type)) 
+	    if (strcaseeq ("Font", type))
 	       widget = font_dialog (page_box, key, value, info);
 	    else if (strcaseeq ("Texture", type))
 	    {
@@ -678,7 +678,7 @@
 	    if (WMIsPLDictionary (ptype)) /* subsubbox */
 	       gtk_widget_hide (widget);
 	 }
-	 else if (strcaseeq ("Key", type)) 
+	 else if (strcaseeq ("Key", type))
 	 {
 	    add_shortcut (page_box, key);
 	 }
@@ -690,17 +690,17 @@
       }
       WMReleasePropList (all_keys);
    }
-   
+
    gtk_widget_set_usize (main_window,
 			 min (gdk_screen_width () - 64,
 			      790 - (section ? 150 : 0)),
 			 min (gdk_screen_height () - 64, 600));
-   
+
    while (gtk_events_pending())
       gtk_main_iteration();
-   
+
    toggle_save (changed = NO, NULL);
-#ifndef FREEBSD_SYSTEM   
+#ifndef FREEBSD_SYSTEM
    if (!section)
       gtk_widget_destroy (progress_window);
 #endif /* not FREEBSD_SYSTEM */
@@ -721,21 +721,21 @@
 
    while (gtk_events_pending())
       gtk_main_iteration();
-   
+
    check_widgetstyle ();
 #ifdef GETSTYLE
    get_theme_attributes ();
 #endif /* GETSTYLE */
-   
+
    while (gtk_events_pending())
       gtk_main_iteration();
 
    gtk_widget_show (main_window);
-   
+
    {
       char *path = g_strconcat (g_get_home_dir (), "/.wmakerconf", NULL);
       DIR  *dir;
-      
+
       if (!(dir = opendir (path)))
       {
 	 dialog_popup (DIALOG_INFO, generate_previews, NULL,
@@ -747,7 +747,7 @@
       else
 	 closedir (dir);
    }
-   
+
    gtk_main ();
    gtk_widget_destroy (main_window);
    cleanup_textures ();
@@ -764,7 +764,7 @@
 
    if (widgetstyle_item)
       gtk_widget_set_sensitive (widgetstyle_item, !convert_bool (value));
-   
+
    WMReleasePropList (plnewstyle);
 }
 
@@ -803,7 +803,7 @@
       char	 *found	      = NULL;
       proplist_t plpath      = WMCreatePLString ("PixmapPath");
       proplist_t pixmap_path = WMGetFromPLDictionary (windowmaker, plpath);
-      
+
       WMReleasePropList (plpath);
 
       for (n = 0; n < WMGetPropListItemCount (pixmap_path) && !found; n++)
@@ -832,7 +832,7 @@
 /*
  *  Genearate a new pixmap widget with pixmap 'name' of maximum size
  *  'max_width' x 'max_height'. If 'pw' is already valid (i.e., != NULL)
- *  just replace the pixmap of the widget. 
+ *  just replace the pixmap of the widget.
  *
  *  Return value:
  *	new or changed pixmap widget
@@ -853,16 +853,16 @@
    if (!pw && width > 0 && height > 0)
       pw = make_image (PKGDATADIR "/black.xpm", width, height, pw);
    pw = make_image (path, width, height, pw);
-   
+
 #else  /* not PREVIEWS or CONVERT */
-   
+
 #ifdef HAVE_STAT
    /*
     *  Don't load large XPM (may cause trouble with imlib)
     */
    {
       struct stat buffer;
-      
+
       if (strstr (path, ".xpm") && stat (path, &buffer) == 0
 	  && buffer.st_size > 65000) /* image too large */
       {
@@ -908,7 +908,7 @@
 #else  /* not HAVE_IMLIB */
 	 pixmap
 	    = gdk_pixmap_create_from_xpm (main_window->window, &mask,
-					  background, PKGDATADIR "/black.xpm"); 
+					  background, PKGDATADIR "/black.xpm");
 #endif /* not HAVE_IMLIB */
       if (!pixmap)			/* pixmap not found or unknown format */
       {
@@ -980,7 +980,7 @@
 {
    GtkWidget *hbox;
    GtkWidget *window, *button;
-   
+
    window = gtk_dialog_new ();
    gtk_window_set_position (GTK_WINDOW (window), GTK_WIN_POS_MOUSE);
    gtk_window_set_title (GTK_WINDOW (window), _("Save before quitting?"));
@@ -1001,7 +1001,7 @@
 		       gtk_pixmap_new (p_array [P_INFO].pixmap,
 				       p_array [P_INFO].mask),
 		       TRUE, FALSE, 5);
-   
+
    gtk_box_pack_start (GTK_BOX (hbox), gtk_label_new (question), TRUE, TRUE, 5);
 
    button = gtk_button_new_with_label (_("Yes"));
@@ -1044,23 +1044,23 @@
 {
    if (!save_rootmenu ())
       return;
-   
+
    if (changed)
    {
       proplist_t newwm = WMCreatePLDictionary (NULL, NULL, NULL);
-      
+
       /*
        *  Compare user attributes with system attributes
        */
       {
 	 proplist_t all_keys = WMGetPLDictionaryKeys (windowmaker) ;
 	 unsigned	 n;
-      
+
 	 for (n = 0; n < WMGetPropListItemCount (all_keys); n++)
 	 {
 	    proplist_t user;
 	    proplist_t key = WMGetFromPLArray (all_keys, n);
-	 
+
 	    user = WMGetFromPLDictionary (windowmaker, key);
 
 	    if (WMGetFromPLDictionary (plist_changed, key))
@@ -1069,7 +1069,7 @@
 	 WMReleasePropList (all_keys);
       }
 
-      if (WMWritePropListToFile (newwm, orig_wmaker_fname, YES))
+      if (WMWritePropListToFile(newwm, orig_wmaker_fname))
       {
 	 changed = NO;
 	 message (_("Window Maker config file '%s' saved."),
@@ -1087,7 +1087,7 @@
 
    enable_revert ();
    toggle_save (FALSE, NULL);
-   
+
    if (ptr && streq (ptr, "quit"))
       gtk_main_quit ();
 }
@@ -1095,7 +1095,7 @@
 /*****************************************************************************
 
 			       private code
-  
+
 *****************************************************************************/
 
 static int
@@ -1119,7 +1119,7 @@
    proplist_t  pltype     = WMCreatePLString ("Type");
    proplist_t  plicon     = WMCreatePLString ("Icon");
    unsigned    i;
-	       
+
    gtk_notebook_set_show_tabs (GTK_NOTEBOOK (subbook), TRUE);
    gtk_notebook_set_scrollable (GTK_NOTEBOOK (subbook), TRUE);
    gtk_notebook_set_tab_pos (GTK_NOTEBOOK (subbook), GTK_POS_TOP);
@@ -1127,10 +1127,10 @@
    gtk_box_pack_start (GTK_BOX (box), subbook, TRUE, TRUE, 0);
    gtk_container_set_border_width (GTK_CONTAINER (subbook), 10);
    gtk_widget_show_all (subbook);
-	       
+
    while (gtk_events_pending())
       gtk_main_iteration();
-	       
+
    for (i = 0; i < WMGetPropListItemCount (subentries); i++)
    {
       GtkWidget  *subpage;
@@ -1140,7 +1140,7 @@
       proplist_t  subicon  = WMGetFromPLDictionary (subentry, plicon);
       proplist_t  subtype  = WMGetFromPLDictionary (subentry, pltype);
       char 	 *path     = NULL;
-		  
+
       if (subicon && WMIsPLString (subicon)) /* subsubsections ? */
 	 path = g_strconcat (PKGDATADIR, "/",
 			     WMGetFromPLString (subicon), NULL);
@@ -1151,17 +1151,17 @@
 
       {
 	 proplist_t data;
-		     
+
 	 data = WMCreatePLDataWithBytes ((unsigned char *) &subpage,
 			    sizeof (GtkWidget *));
 	 WMPutInPLDictionary (subentry, plwidget, data);
 	 WMReleasePropList (data);
       }
-		  
-		  
+
+
       while (gtk_events_pending())
 	 gtk_main_iteration();
-		  
+
       /*
        *  Add subboxes for color, texture and font
        */
@@ -1176,9 +1176,9 @@
 	 proplist_t color_data;
 	 proplist_t texture_data;
 	 proplist_t font_data;
-		     
+
 	 gtk_container_add (GTK_CONTAINER (subpage), vbox);
-		     
+
 	 /*
 	  *  Overall boxes
 	  */
@@ -1194,14 +1194,14 @@
 			     TRUE, TRUE, 5);
 	 while (gtk_events_pending())
 	    gtk_main_iteration();
-		     
+
 	 /*
 	  *  Color box
 	  */
 	 {
 	    GtkWidget  *frame = gtk_frame_new (_("Colors"));
 	    GtkWidget  *box   = color_box;
-			
+
 	    gtk_box_pack_start (GTK_BOX (color_frame), frame,
 				TRUE, TRUE, 0);
 	    gtk_frame_set_label_align (GTK_FRAME (frame), 0.5, 0.5);
@@ -1243,7 +1243,7 @@
 
 	 while (gtk_events_pending())
 	    gtk_main_iteration();
-		     
+
 	 /*
 	  *  Make option box with subsubsections and subboxes
 	  *  for color, texture and font
@@ -1265,7 +1265,7 @@
 	       proplist_t ssentry;
 	       proplist_t ssinfo;
 	       GtkWidget  *menu_item;
-			   
+
 	       thisss    = WMGetFromPLArray (ssentries, k);
 	       ssentry   = WMGetFromPLDictionary (subtype, thisss);
 	       ssinfo    = WMGetFromPLDictionary (ssentry, plinfo);
@@ -1295,7 +1295,7 @@
 
 	    while (gtk_events_pending())
 	       gtk_main_iteration();
-			
+
 	    {
 	       GtkWidget *frame;
 	       GtkWidget *box = gtk_hbox_new (TRUE, 0);
@@ -1387,12 +1387,12 @@
 			     TRUE, TRUE, 0);
       gtk_widget_show_all (label_box);
    }
-   
+
    scrolled = gtk_scrolled_window_new (NULL, NULL);
-   gtk_scrolled_window_set_policy (GTK_SCROLLED_WINDOW (scrolled), 
+   gtk_scrolled_window_set_policy (GTK_SCROLLED_WINDOW (scrolled),
 				   GTK_POLICY_AUTOMATIC, GTK_POLICY_AUTOMATIC);
    gtk_scrolled_window_add_with_viewport (GTK_SCROLLED_WINDOW (scrolled),
-					  vbox);    
+					  vbox);
    gtk_notebook_append_page_menu (notebook, scrolled, label_box, NULL);
    gtk_widget_show_all (scrolled);
 
@@ -1412,7 +1412,7 @@
    char         *text     = gtk_object_get_user_data (GTK_OBJECT (widget));
    char         *prefix   = (char *) ptr;
    char		*path	  = g_strconcat (prefix, "/", text, NULL);
-   
+
    for (n = 0; n < WMGetPropListItemCount (all_keys); n++)
    {
       proplist_t key    = WMGetFromPLArray (all_keys, n);
@@ -1437,7 +1437,7 @@
 
 	       str1 [right - path] = 0;
 	       str2 [right - path] = 0;
-	       
+
 	       if (g_strcasecmp (str1, str2) == 0)
 		  gtk_widget_hide (widget);
 	       Free (str1);
Seulement dans wmakerconf-2.12.new/src: window.c~
diff -aur wmakerconf-2.12.pristine/src/wmconfig.c wmakerconf-2.12.new/src/wmconfig.c
--- wmakerconf-2.12.pristine/src/wmconfig.c	2013-03-04 14:43:58.160120700 +0100
+++ wmakerconf-2.12.new/src/wmconfig.c	2013-03-04 14:49:19.245086597 +0100
@@ -1,8 +1,8 @@
 /*
- *  wmconfig.c:		Input of WindowMaker config file	
+ *  wmconfig.c:		Input of WindowMaker config file
  *
  *  Written by:		Ullrich Hafner
- *		
+ *
  *  Copyright (C) 1998 Ullrich Hafner <hafner@bigfoot.de>
  *
  *  This program is free software; you can redistribute it and/or modify
@@ -55,7 +55,7 @@
 /*******************************************************************************
 
 			       global variables
-  
+
 *******************************************************************************/
 
 proplist_t plist_changed 	= NULL;	/* modified proplist keys */
@@ -64,7 +64,7 @@
 char       *orig_wmaker_fname 	= NULL;	/* original WindowMaker filename */
 proplist_t orig_rootmenu 	= NULL;	/* original WMRootMenu file */
 char       *orig_rootmenu_fname = NULL;	/* original WMRootMenu filename */
- 
+
 GtkWidget  *log_text      = NULL;
 
 static GtkWidget *
@@ -75,7 +75,7 @@
 /*******************************************************************************
 
 			       public code
-  
+
 *******************************************************************************/
 
 
@@ -88,15 +88,15 @@
    proplist_t wmpanel;			/* Panel */
    proplist_t wmakerconf;
    GtkWidget  *window;
-   const char *conffile 		 = PKGDATADIR "/WMWmakerconf";   
+   const char *conffile 		 = PKGDATADIR "/WMWmakerconf";
    bool_t      no_inet 			 = NO;
    /* -1 => unspec, 0 => disallow, 1=>allow*/
    int	       sections_restriction_type = -1;
-   node	      *sections 		 = NULL;	
-   
+   node	      *sections 		 = NULL;
+
    WMPLSetCaseSensitive(FALSE);
-   
-   
+
+
    gtk_set_locale ();
    gtk_init (&argc, &argv);
 
@@ -118,13 +118,13 @@
     */
    {
       int argidx;
-      
+
       for (argidx = 1; argidx < argc; argidx++)
       {
 	 char   *arg 	   = argv [argidx];
 	 char   *nextarg   = argv [argidx + 1];
 	 bool_t  more_args = argc - argidx - 1;
-	    
+
 	 if (streq (arg, "--version"))
 	 {
 	    fprintf(stderr, PACKAGE " " VERSION "\n");
@@ -132,7 +132,7 @@
 	 }
 	 else if (streq (arg, "--help"))
 	 {
-	    usage (0);	
+	    usage (0);
 	 }
 	 else if (streq (arg, "--config"))
 	 {
@@ -152,10 +152,10 @@
 	 {
 	    int   arg_is_allow = streq (arg, "--show");
 	    node *newnode      = Calloc (1, sizeof(node));
-		
+
 	    if (!more_args)
 	       usage (1);
-		
+
 	    if (!sections)
 	    {
 	       sections_restriction_type = arg_is_allow;
@@ -166,7 +166,7 @@
 	       usage (1);
 	    }
 	    newnode->next   = sections;
-	    newnode->name   = nextarg;		
+	    newnode->name   = nextarg;
 	    newnode->length = strlen (nextarg);
 	    sections 	    = newnode;
 	    ++argidx;
@@ -179,18 +179,18 @@
    }
 
    window = make_log_window ();
-   
+
    /*
     *  Read control file of wmakerconf
     */
    {
       proplist_t plpanel  = WMCreatePLString ("Panel");
       proplist_t plwmaker = WMCreatePLString ("WindowMaker");
-      
+
       wmakerconf = read_proplist (conffile);
       if (!wmakerconf)
 	 error (_("Can't read file '%s'"), conffile);
-      
+
       wmconfig = WMGetFromPLDictionary (wmakerconf, plwmaker);
       if (!wmconfig)
 	 error (_("'%s': parse error."), conffile);
@@ -202,7 +202,7 @@
       WMReleasePropList (plpanel);
       WMReleasePropList (plwmaker);
    }
-   
+
    /*
     *  Read 'WMRootMenu' file
     */
@@ -212,18 +212,18 @@
       if (orig_rootmenu)
       {
 	 char *new = g_strconcat (orig_rootmenu_fname, ".bak", NULL);
-	 
+
 	 /*
 	  *  Generate backup file "'path'.bak"
 	  */
-	 if (WMWritePropListToFile (orig_rootmenu, new, YES))
+	 if (WMWritePropListToFile(orig_rootmenu, new))
 	    message (_("Backupfile `%s' generated."), new);
 	 else
 	    error (_("Can't write backupfile `%s'."), new);
 	 Free (new);
       }
    }
-   
+
    /*
     *  Open 'WindowMaker' file
     */
@@ -232,12 +232,12 @@
 
    plist_changed = WMCreatePLDictionary (NULL, NULL, NULL);
    pl_yes	 = WMCreatePLString ("Yes");
-   
+
    if (windowmaker && WMIsPLDictionary (windowmaker))
    {
       proplist_t keys  = WMGetPLDictionaryKeys (windowmaker);
       unsigned	 n;
-      
+
       for (n = 0; n < WMGetPropListItemCount (keys); n++)
 	 WMPutInPLDictionary (plist_changed, WMGetFromPLArray (keys, n),
 				  pl_yes);
@@ -245,7 +245,7 @@
       WMReleasePropList (keys);
       orig_wmaker = WMDeepCopyPropList (windowmaker);
    }
-   
+
    /*
     *  Open system 'WindowMaker' file
     */
@@ -257,12 +257,12 @@
 			   "/usr/local/share/WindowMaker/Defaults",
 			   "/usr/etc/WindowMaker",
 			   "/usr/X11R6/lib/X11/WindowMaker"};
-      
+
       for (dir = 0; dir < sizeof (path) / sizeof (path [0]); dir++)
       {
 	 char *global_file = g_strconcat (path [dir], "/WindowMaker", NULL);
 	 char *filename    = expand_tilde (global_file);
-      
+
 	 global_windowmaker = read_proplist (filename);
 	 Free (global_file);
 	 Free (filename);
@@ -270,17 +270,17 @@
 	    break;
       }
    }
-   
+
    if (!global_windowmaker)
    {
       warning (_("Can't open global WindowMaker configuration file."));
       global_windowmaker = WMCreatePLDictionary (NULL, NULL, NULL);
    }
-   
+
    if (!windowmaker)
    {
       windowmaker = global_windowmaker;
-      if (WMWritePropListToFile (windowmaker, orig_wmaker_fname, YES))
+      if (WMWritePropListToFile(windowmaker, orig_wmaker_fname))
 	 warning (_("New WindowMaker configuration file `%s' created."),
 		  orig_wmaker_fname);
       else
@@ -294,7 +294,7 @@
       /*
        *  Generate backup file "'path'.bak"
        */
-      if (WMWritePropListToFile (windowmaker, new, YES))
+      if (WMWritePropListToFile(windowmaker, new))
 	 message (_("Backupfile `%s' generated."), new);
       else
 	 error (_("Can't write backupfile `%s'."), new);
@@ -303,7 +303,7 @@
       WMMergePLDictionaries (global_windowmaker, windowmaker, True /*recurse*/);
       windowmaker = global_windowmaker;
    }
-   
+
    /*
     *  Fill WindowMaker attributes not defined by the user with system defaults
     */
@@ -311,16 +311,16 @@
       proplist_t keys  = WMGetPLDictionaryKeys (wmconfig);
       proplist_t pldef = WMCreatePLString ("Default");
       unsigned	 n;
-      
+
       for (n = 0; n < WMGetPropListItemCount (keys); n++)
       {
 	 proplist_t attribute = WMGetFromPLArray (keys, n);
-	 
+
 	 if (!WMGetFromPLDictionary (windowmaker, attribute)) /* not defined */
 	 {
 	    proplist_t apl = WMGetFromPLDictionary (wmconfig, attribute);
 	    proplist_t val = WMGetFromPLDictionary (apl, pldef);
-	    
+
 	    WMPutInPLDictionary (windowmaker, attribute, val);
 	 }
       }
@@ -329,7 +329,7 @@
       WMReleasePropList (keys);
    }
 
-   root_window (conffile,sections, sections_restriction_type, no_inet, 
+   root_window (conffile,sections, sections_restriction_type, no_inet,
 		window, wmconfig, wmpanel, windowmaker);
 
    WMReleasePropList (wmakerconf);
@@ -343,9 +343,9 @@
 
    Free (orig_rootmenu_fname);
    Free (orig_wmaker_fname);
-   
+
    g_mem_profile ();
-   
+
    return 0;
 }
 
@@ -354,7 +354,7 @@
 {
    GtkWidget *window;
    GtkWidget *button;
-   
+
    window = gtk_dialog_new ();
    gtk_window_set_position (GTK_WINDOW (window), GTK_WIN_POS_MOUSE);
    gtk_window_set_title (GTK_WINDOW (window), _("Messages"));
@@ -372,7 +372,7 @@
    gtk_signal_connect_object (GTK_OBJECT (button), "clicked",
 			      (GtkSignalFunc) gtk_widget_hide,
 			      GTK_OBJECT (window));
-   
+
    {
       GtkWidget *text_view, *scrollw;
 
@@ -389,19 +389,19 @@
       gtk_text_view_set_editable (GTK_TEXT_VIEW (text_view), FALSE);
       gtk_container_add (GTK_CONTAINER (scrollw), text_view);
       gtk_widget_show (text_view);
-      
+
       gtk_text_view_set_editable (GTK_TEXT_VIEW (text_view), NO);
       log_text = text_view;
    }
    gtk_widget_set_usize (window, 600, 400);
-   
+
    return window;
 }
 
 static void
 usage (int status)
 {
-    fprintf (stderr, PACKAGE " " VERSION "\n");    
+    fprintf (stderr, PACKAGE " " VERSION "\n");
     fprintf (stderr,
 	     "Usage: wmakerconf [OPTION] [[--show SectionName ...] | "
 	     "[--hide SectionName ...]]\n"
@@ -409,6 +409,6 @@
 	     "	--config PathToConfigFile\n"
 	     "	--no-inet\n"
 	     "	--help\n"
-	     "	--version\n");	  
-    exit (status);    
+	     "	--version\n");
+    exit (status);
 }
Seulement dans wmakerconf-2.12.new/src: wmconfig.c~
